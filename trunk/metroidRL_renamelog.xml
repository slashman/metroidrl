<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.0.3, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Thu Dec 07 18:03:27 COT 2006

  Jar file to be obfuscated:           metroidRL.jar
  Target Jar file for obfuscated code: metroidRL_obf.jar

-->
<!--
  Memory in use after class data structure built: 2947760 bytes
  Total memory available                        : 5488640 bytes
-->
<expose>
  <class name="mrl.Main"/>
  <method class="mrl.Main" name="void main(java.lang.String[])"/>
</expose>
<map>
  <package name="mrl.level" map="A"/>
  <class name="mrl.level.SpawnMonster" map="A"/>
  <field class="mrl.level.SpawnMonster" name="singleton" map="z"/>
  <method class="mrl.level.SpawnMonster" name="mrl.level.SpawnMonster getAction()" map="_"/>
  <method class="mrl.level.SpawnMonster" name="void execute()" map="F"/>
  <method class="mrl.level.SpawnMonster" name="java.lang.String getID()" map="D"/>
  <class name="mrl.level.MapCellFactory" map="B"/>
  <field class="mrl.level.MapCellFactory" name="definitions" map="A"/>
  <field class="mrl.level.MapCellFactory" name="singleton" map="B"/>
  <method class="mrl.level.MapCellFactory" name="void init(mrl.level.Cell[])" map="A"/>
  <method class="mrl.level.MapCellFactory" name="void addDefinition(mrl.level.Cell)" map="A"/>
  <method class="mrl.level.MapCellFactory" name="mrl.level.Cell getMapCell(java.lang.String)" map="A"/>
  <method class="mrl.level.MapCellFactory" name="mrl.level.MapCellFactory getMapCellFactory()" map="A"/>
  <class name="mrl.level.EmergeMonster" map="C"/>
  <field class="mrl.level.EmergeMonster" name="singleton" map="X"/>
  <method class="mrl.level.EmergeMonster" name="mrl.level.EmergeMonster getAction()" map="S"/>
  <method class="mrl.level.EmergeMonster" name="void execute()" map="F"/>
  <method class="mrl.level.EmergeMonster" name="java.lang.String getID()" map="D"/>
  <class name="mrl.level.Cell" map="D"/>
  <field class="mrl.level.Cell" name="keyCost" map="A"/>
  <field class="mrl.level.Cell" name="isOpaque" map="B"/>
  <field class="mrl.level.Cell" name="shortDescription" map="C"/>
  <field class="mrl.level.Cell" name="isStair" map="D"/>
  <field class="mrl.level.Cell" name="damageOnStep" map="E"/>
  <field class="mrl.level.Cell" name="DOOR" map="F"/>
  <field class="mrl.level.Cell" name="isWater" map="G"/>
  <field class="mrl.level.Cell" name="appearance" map="H"/>
  <field class="mrl.level.Cell" name="isSolid" map="I"/>
  <field class="mrl.level.Cell" name="ID" map="J"/>
  <field class="mrl.level.Cell" name="appearanceID" map="K"/>
  <field class="mrl.level.Cell" name="description" map="L"/>
  <field class="mrl.level.Cell" name="height" map="M"/>
  <field class="mrl.level.Cell" name="heightMod" map="N"/>
  <method class="mrl.level.Cell" name="boolean isSolid()" map="A"/>
  <method class="mrl.level.Cell" name="java.lang.String getShortDescription()" map="B"/>
  <method class="mrl.level.Cell" name="boolean isOpaque()" map="C"/>
  <method class="mrl.level.Cell" name="boolean isWater()" map="D"/>
  <method class="mrl.level.Cell" name="java.lang.String getID()" map="E"/>
  <method class="mrl.level.Cell" name="int getHeightMod()" map="F"/>
  <method class="mrl.level.Cell" name="boolean isStair()" map="G"/>
  <method class="mrl.level.Cell" name="void setWater(boolean)" map="A"/>
  <method class="mrl.level.Cell" name="void setIsStair(boolean)" map="B"/>
  <method class="mrl.level.Cell" name="void setHeightMod(int)" map="A"/>
  <method class="mrl.level.Cell" name="int getKeyCost()" map="H"/>
  <method class="mrl.level.Cell" name="void setHeight(int)" map="B"/>
  <method class="mrl.level.Cell" name="void setDamageOnStep(int)" map="C"/>
  <method class="mrl.level.Cell" name="void setKeyCost(int)" map="D"/>
  <method class="mrl.level.Cell" name="mrl.ui.Appearance getAppearance()" map="I"/>
  <method class="mrl.level.Cell" name="java.lang.String getDescription()" map="J"/>
  <method class="mrl.level.Cell" name="int getDamageOnStep()" map="K"/>
  <method class="mrl.level.Cell" name="int getHeight()" map="L"/>
  <class name="mrl.level.Respawner" map="E"/>
  <field class="mrl.level.Respawner" name="prob" map="&#x00ed;"/>
  <field class="mrl.level.Respawner" name="freq" map="&#x00ee;"/>
  <method class="mrl.level.Respawner" name="java.lang.String getDescription()" map="H"/>
  <method class="mrl.level.Respawner" name="int getFreq()" map="&#x0102;"/>
  <method class="mrl.level.Respawner" name="int getProb()" map="&#x0103;"/>
  <class name="mrl.level.EmergerAI" map="F"/>
  <field class="mrl.level.EmergerAI" name="counter" map="Q"/>
  <method class="mrl.level.EmergerAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.level.EmergerAI" name="java.lang.String getID()" map="B"/>
  <method class="mrl.level.EmergerAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="mrl.level.PreemergeEffects" map="G"/>
  <field class="mrl.level.PreemergeEffects" name="singleton" map="Y"/>
  <method class="mrl.level.PreemergeEffects" name="void execute()" map="F"/>
  <method class="mrl.level.PreemergeEffects" name="mrl.level.PreemergeEffects getAction()" map="T"/>
  <method class="mrl.level.PreemergeEffects" name="java.lang.String getID()" map="D"/>
  <class name="mrl.level.Emerger" map="H"/>
  <field class="mrl.level.Emerger" name="point" map="J"/>
  <field class="mrl.level.Emerger" name="counter" map="K"/>
  <field class="mrl.level.Emerger" name="monster" map="L"/>
  <method class="mrl.level.Emerger" name="int getCounter()" map="K"/>
  <method class="mrl.level.Emerger" name="java.lang.String getDescription()" map="H"/>
  <method class="mrl.level.Emerger" name="sz.util.Position getPoint()" map="L"/>
  <method class="mrl.level.Emerger" name="mrl.monster.Monster getMonster()" map="M"/>
  <class name="mrl.level.SFX" map="I"/>
  <field class="mrl.level.SFX" name="effect" map="Z"/>
  <field class="mrl.level.SFX" name="THUNDER" map="_"/>
  <field class="mrl.level.SFX" name="singleton" map="a"/>
  <method class="mrl.level.SFX" name="void setEffect(int)" map="C"/>
  <method class="mrl.level.SFX" name="void execute()" map="F"/>
  <method class="mrl.level.SFX" name="java.lang.String getID()" map="D"/>
  <method class="mrl.level.SFX" name="mrl.level.SFX getThunder()" map="U"/>
  <class name="mrl.level.RespawnAI" map="J"/>
  <field class="mrl.level.RespawnAI" name="counter" map="A"/>
  <method class="mrl.level.RespawnAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.level.RespawnAI" name="java.lang.String getID()" map="B"/>
  <method class="mrl.level.RespawnAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="mrl.level.Level" map="K"/>
  <field class="mrl.level.Level" name="haunted" map="A"/>
  <field class="mrl.level.Level" name="exitPositions" map="B"/>
  <field class="mrl.level.Level" name="unleashers" map="C"/>
  <field class="mrl.level.Level" name="levelNumber" map="D"/>
  <field class="mrl.level.Level" name="isCold" map="E"/>
  <field class="mrl.level.Level" name="musicKeyNoon" map="F"/>
  <field class="mrl.level.Level" name="remembered" map="G"/>
  <field class="mrl.level.Level" name="nightRespawner" map="H"/>
  <field class="mrl.level.Level" name="mapLocationKey" map="I"/>
  <field class="mrl.level.Level" name="features" map="J"/>
  <field class="mrl.level.Level" name="description" map="K"/>
  <field class="mrl.level.Level" name="inhabitants" map="L"/>
  <field class="mrl.level.Level" name="isCandled" map="M"/>
  <field class="mrl.level.Level" name="isHostageSafe" map="N"/>
  <field class="mrl.level.Level" name="exits" map="O"/>
  <field class="mrl.level.Level" name="items" map="P"/>
  <field class="mrl.level.Level" name="ID" map="Q"/>
  <field class="mrl.level.Level" name="visible" map="R"/>
  <field class="mrl.level.Level" name="smartFeatures" map="S"/>
  <field class="mrl.level.Level" name="dispatcher" map="T"/>
  <field class="mrl.level.Level" name="map" map="U"/>
  <field class="mrl.level.Level" name="candles" map="V"/>
  <field class="mrl.level.Level" name="monsters" map="W"/>
  <field class="mrl.level.Level" name="frosts" map="X"/>
  <field class="mrl.level.Level" name="spawnItemIDs" map="Y"/>
  <field class="mrl.level.Level" name="boss" map="Z"/>
  <field class="mrl.level.Level" name="isDay" map="_"/>
  <field class="mrl.level.Level" name="dwellerIDs" map="a"/>
  <field class="mrl.level.Level" name="tempActors" map="b"/>
  <field class="mrl.level.Level" name="messagesneffects" map="c"/>
  <field class="mrl.level.Level" name="musicKeyMorning" map="d"/>
  <field class="mrl.level.Level" name="hashCounters" map="e"/>
  <field class="mrl.level.Level" name="player" map="f"/>
  <field class="mrl.level.Level" name="bloods" map="g"/>
  <field class="mrl.level.Level" name="respawner" map="h"/>
  <field class="mrl.level.Level" name="hashFlags" map="i"/>
  <method class="mrl.level.Level" name="void disableTriggers()" map="A"/>
  <method class="mrl.level.Level" name="void removeBoss()" map="B"/>
  <method class="mrl.level.Level" name="void addMessage(java.lang.String, sz.util.Position)" map="A"/>
  <method class="mrl.level.Level" name="void spawnTreasure()" map="C"/>
  <method class="mrl.level.Level" name="mrl.monster.Monster getMonsterAt(int, int, int)" map="A"/>
  <method class="mrl.level.Level" name="void removeSmartFeature(mrl.feature.SmartFeature)" map="A"/>
  <method class="mrl.level.Level" name="mrl.monster.Monster getBoss()" map="D"/>
  <method class="mrl.level.Level" name="boolean isCold()" map="E"/>
  <method class="mrl.level.Level" name="sz.util.SZQueue getMessagesAndEffects()" map="F"/>
  <method class="mrl.level.Level" name="void addCandle()" map="G"/>
  <method class="mrl.level.Level" name="mrl.feature.SmartFeature getSmartFeature(sz.util.Position)" map="A"/>
  <method class="mrl.level.Level" name="void setBoss(mrl.monster.Monster)" map="A"/>
  <method class="mrl.level.Level" name="mrl.feature.Feature getFeatureAt(sz.util.Position)" map="B"/>
  <method class="mrl.level.Level" name="void setDwellerIDs(java.lang.String[])" map="A"/>
  <method class="mrl.level.Level" name="void reduceFrosts()" map="H"/>
  <method class="mrl.level.Level" name="boolean isExit(sz.util.Position)" map="C"/>
  <method class="mrl.level.Level" name="void removeActor(mrl.actor.Actor)" map="A"/>
  <method class="mrl.level.Level" name="mrl.player.Player getPlayer()" map="I"/>
  <method class="mrl.level.Level" name="boolean isValidCoordinate(int, int)" map="C"/>
  <method class="mrl.level.Level" name="void setDescription(java.lang.String)" map="A"/>
  <method class="mrl.level.Level" name="int getDepth()" map="J"/>
  <method class="mrl.level.Level" name="int getHeight()" map="K"/>
  <method class="mrl.level.Level" name="void setSpawnItemIDs(java.lang.String[])" map="B"/>
  <method class="mrl.level.Level" name="mrl.monster.Monster getMonsterAt(sz.util.Position)" map="D"/>
  <method class="mrl.level.Level" name="void setMapLocationKey(java.lang.String)" map="B"/>
  <method class="mrl.level.Level" name="boolean isVisible(int, int)" map="D"/>
  <method class="mrl.level.Level" name="boolean isValidCoordinate(int, int, int)" map="B"/>
  <method class="mrl.level.Level" name="mrl.level.Cell getMapCell(int, int, int)" map="C"/>
  <method class="mrl.level.Level" name="void checkUnleashers(mrl.game.Game)" map="A"/>
  <method class="mrl.level.Level" name="void anihilate()" map="L"/>
  <method class="mrl.level.Level" name="void setNightRespawner(mrl.level.Respawner)" map="A"/>
  <method class="mrl.level.Level" name="void darken(int, int)" map="E"/>
  <method class="mrl.level.Level" name="int getFrostAt(sz.util.Position)" map="E"/>
  <method class="mrl.level.Level" name="java.lang.String getMusicKeyNoon()" map="M"/>
  <method class="mrl.level.Level" name="void addExit(sz.util.Position, java.lang.String)" map="A"/>
  <method class="mrl.level.Level" name="mrl.monster.VMonster getMonsters()" map="N"/>
  <method class="mrl.level.Level" name="crl.levelgen.MonsterSpawnInfo[] getSpawnInfo()" map="O"/>
  <method class="mrl.level.Level" name="void addBlood(sz.util.Position, int)" map="A"/>
  <method class="mrl.level.Level" name="void setHaunted(boolean)" map="A"/>
  <method class="mrl.level.Level" name="void populate()" map="P"/>
  <method class="mrl.level.Level" name="void destroyFeature(mrl.feature.Feature)" map="A"/>
  <method class="mrl.level.Level" name="void updateLevelStatus()" map="Q"/>
  <method class="mrl.level.Level" name="int getDepthFromPlayer(int, int)" map="F"/>
  <method class="mrl.level.Level" name="boolean isHaunted()" map="R"/>
  <method class="mrl.level.Level" name="void setMusicKeyNoon(java.lang.String)" map="C"/>
  <method class="mrl.level.Level" name="void setIsCandled(boolean)" map="B"/>
  <method class="mrl.level.Level" name="mrl.level.Dispatcher getDispatcher()" map="S"/>
  <method class="mrl.level.Level" name="mrl.level.Cell[][][] getCells()" map="T"/>
  <method class="mrl.level.Level" name="java.util.Vector getItemsAt(sz.util.Position)" map="F"/>
  <method class="mrl.level.Level" name="void setLevelNumber(int)" map="A"/>
  <method class="mrl.level.Level" name="int getCandles()" map="U"/>
  <method class="mrl.level.Level" name="void validate(sz.util.Position)" map="G"/>
  <method class="mrl.level.Level" name="int getWidth()" map="V"/>
  <method class="mrl.level.Level" name="void savePop()" map="W"/>
  <method class="mrl.level.Level" name="void setHostageSafe(boolean)" map="C"/>
  <method class="mrl.level.Level" name="mrl.level.Cell[][] getMemoryCellsAround(int, int, int, int, int)" map="A"/>
  <method class="mrl.level.Level" name="int getLevelNumber()" map="X"/>
  <method class="mrl.level.Level" name="void setUnleashers(mrl.cuts.Unleasher[])" map="A"/>
  <method class="mrl.level.Level" name="void setDispatcher(mrl.level.Dispatcher)" map="A"/>
  <method class="mrl.level.Level" name="sz.util.Position getDeepPosition(sz.util.Position)" map="H"/>
  <method class="mrl.level.Level" name="boolean remembers(int, int, int)" map="D"/>
  <method class="mrl.level.Level" name="void removeMonster(mrl.monster.Monster)" map="B"/>
  <method class="mrl.level.Level" name="void addMonster(mrl.monster.Monster)" map="C"/>
  <method class="mrl.level.Level" name="boolean isValidCoordinate(sz.util.Position)" map="I"/>
  <method class="mrl.level.Level" name="void respawn()" map="Y"/>
  <method class="mrl.level.Level" name="void addMessage(java.lang.String)" map="D"/>
  <method class="mrl.level.Level" name="void setRespawner(mrl.level.Respawner)" map="B"/>
  <method class="mrl.level.Level" name="void stopTime(int)" map="B"/>
  <method class="mrl.level.Level" name="java.lang.String getMapLocationKey()" map="Z"/>
  <method class="mrl.level.Level" name="java.lang.String getDescription()" map="_"/>
  <method class="mrl.level.Level" name="void addSmartFeature(java.lang.String, sz.util.Position)" map="B"/>
  <method class="mrl.level.Level" name="java.lang.String getExitOn(sz.util.Position)" map="J"/>
  <method class="mrl.level.Level" name="void removeRespawner()" map="a"/>
  <method class="mrl.level.Level" name="boolean isDay()" map="b"/>
  <method class="mrl.level.Level" name="void addFeature(mrl.feature.Feature)" map="B"/>
  <method class="mrl.level.Level" name="void setID(java.lang.String)" map="E"/>
  <method class="mrl.level.Level" name="void setFlag(java.lang.String, boolean)" map="A"/>
  <method class="mrl.level.Level" name="void setMusicKeyMorning(java.lang.String)" map="F"/>
  <method class="mrl.level.Level" name="mrl.actor.Actor getActorAt(sz.util.Position)" map="K"/>
  <method class="mrl.level.Level" name="void setPlayer(mrl.player.Player)" map="A"/>
  <method class="mrl.level.Level" name="void addSmartFeature(mrl.feature.SmartFeature)" map="B"/>
  <method class="mrl.level.Level" name="void addFeature(java.lang.String, sz.util.Position)" map="C"/>
  <method class="mrl.level.Level" name="java.lang.String[] getDwellerIDs()" map="c"/>
  <method class="mrl.level.Level" name="sz.util.Position getExitFor(java.lang.String)" map="G"/>
  <method class="mrl.level.Level" name="void addCounter(java.lang.String, int)" map="A"/>
  <method class="mrl.level.Level" name="mrl.monster.Monster getMonsterByID(java.lang.String)" map="H"/>
  <method class="mrl.level.Level" name="boolean hasNoonMusic()" map="d"/>
  <method class="mrl.level.Level" name="void setInhabitants(crl.levelgen.MonsterSpawnInfo[])" map="A"/>
  <method class="mrl.level.Level" name="java.lang.String getID()" map="e"/>
  <method class="mrl.level.Level" name="sz.util.Counter getCounter(java.lang.String)" map="I"/>
  <method class="mrl.level.Level" name="void addActor(mrl.actor.Actor)" map="B"/>
  <method class="mrl.level.Level" name="void loadPop()" map="f"/>
  <method class="mrl.level.Level" name="void signal(sz.util.Position, int, java.lang.String)" map="A"/>
  <method class="mrl.level.Level" name="java.lang.String getMusicKeyMorning()" map="g"/>
  <method class="mrl.level.Level" name="void addMessage(mrl.actor.Message)" map="A"/>
  <method class="mrl.level.Level" name="void setCold(boolean)" map="D"/>
  <method class="mrl.level.Level" name="java.lang.String getBloodAt(sz.util.Position)" map="L"/>
  <method class="mrl.level.Level" name="void removeCounter(java.lang.String)" map="J"/>
  <method class="mrl.level.Level" name="boolean remembers(int, int)" map="G"/>
  <method class="mrl.level.Level" name="mrl.level.Cell getMapCell(sz.util.Position)" map="M"/>
  <method class="mrl.level.Level" name="boolean isWalkable(sz.util.Position)" map="N"/>
  <method class="mrl.level.Level" name="boolean isHostageSafe()" map="h"/>
  <method class="mrl.level.Level" name="void addFrost(sz.util.Position, int)" map="B"/>
  <method class="mrl.level.Level" name="void setSeen(int, int)" map="B"/>
  <method class="mrl.level.Level" name="mrl.level.Cell[][] getVisibleCellsAround(int, int, int, int, int)" map="B"/>
  <method class="mrl.level.Level" name="void setIsDay(boolean)" map="E"/>
  <method class="mrl.level.Level" name="void removeExit(java.lang.String)" map="K"/>
  <method class="mrl.level.Level" name="void darken()" map="i"/>
  <method class="mrl.level.Level" name="boolean getFlag(java.lang.String)" map="L"/>
  <method class="mrl.level.Level" name="boolean isCandled()" map="j"/>
  <method class="mrl.level.Level" name="void addEffect(mrl.ui.effects.Effect)" map="A"/>
  <method class="mrl.level.Level" name="void createMonster(java.lang.String, sz.util.Position)" map="D"/>
  <method class="mrl.level.Level" name="java.lang.String[] getSpawnItemsIDs()" map="k"/>
  <method class="mrl.level.Level" name="boolean blockLOS(int, int)" map="A"/>
  <method class="mrl.level.Level" name="void setCells(mrl.level.Cell[][][])" map="A"/>
  <class name="mrl.level.Dispatcher" map="L"/>
  <field class="mrl.level.Dispatcher" name="countdown" map="A"/>
  <field class="mrl.level.Dispatcher" name="fixed" map="B"/>
  <field class="mrl.level.Dispatcher" name="actors" map="C"/>
  <field class="mrl.level.Dispatcher" name="ixx" map="D"/>
  <method class="mrl.level.Dispatcher" name="boolean contains(mrl.actor.Actor)" map="A"/>
  <method class="mrl.level.Dispatcher" name="mrl.actor.Actor getNextActor()" map="A"/>
  <method class="mrl.level.Dispatcher" name="void addActor(mrl.actor.Actor, boolean)" map="A"/>
  <method class="mrl.level.Dispatcher" name="void addActor(mrl.actor.Actor, boolean, java.lang.Object)" map="A"/>
  <method class="mrl.level.Dispatcher" name="void addActor(mrl.actor.Actor)" map="B"/>
  <method class="mrl.level.Dispatcher" name="java.util.Vector getActors()" map="B"/>
  <method class="mrl.level.Dispatcher" name="void setFixed(mrl.actor.Actor, int)" map="A"/>
  <method class="mrl.level.Dispatcher" name="void returnActor(mrl.actor.Actor)" map="C"/>
  <method class="mrl.level.Dispatcher" name="void removeActor(mrl.actor.Actor)" map="D"/>
  <method class="mrl.level.Dispatcher" name="void removeAll()" map="C"/>
  <package name="mrl.cuts" map="B"/>
  <class name="mrl.cuts.Unleasher" map="A"/>
  <field class="mrl.cuts.Unleasher" name="enabled" map="A"/>
  <method class="mrl.cuts.Unleasher" name="void unleash(mrl.level.Level, mrl.game.Game)" map="A"/>
  <method class="mrl.cuts.Unleasher" name="boolean enabled()" map="A"/>
  <method class="mrl.cuts.Unleasher" name="void disable()" map="B"/>
  <class name="mrl.cuts.Start" map="B"/>
  <method class="mrl.cuts.Start" name="void unleash(mrl.level.Level, mrl.game.Game)" map="A"/>
  <class name="mrl.cuts.BonyIntro" map="C"/>
  <method class="mrl.cuts.BonyIntro" name="void unleash(mrl.level.Level, mrl.game.Game)" map="A"/>
  <package name="mrl.action" map="C"/>
  <package name="mrl.action.monster" map="A"/>
  <class name="mrl.action.monster.MonsterMissile" map="A"/>
  <field class="mrl.action.monster.MonsterMissile" name="TYPE_STRAIGHT" map="b"/>
  <field class="mrl.action.monster.MonsterMissile" name="effectType" map="c"/>
  <field class="mrl.action.monster.MonsterMissile" name="TYPE_DIRECT" map="d"/>
  <field class="mrl.action.monster.MonsterMissile" name="range" map="e"/>
  <field class="mrl.action.monster.MonsterMissile" name="TYPE_AXE" map="f"/>
  <field class="mrl.action.monster.MonsterMissile" name="damage" map="g"/>
  <field class="mrl.action.monster.MonsterMissile" name="type" map="h"/>
  <field class="mrl.action.monster.MonsterMissile" name="effectID" map="i"/>
  <field class="mrl.action.monster.MonsterMissile" name="statusEffect" map="j"/>
  <field class="mrl.action.monster.MonsterMissile" name="effectWav" map="k"/>
  <field class="mrl.action.monster.MonsterMissile" name="message" map="l"/>
  <method class="mrl.action.monster.MonsterMissile" name="void set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="mrl.action.monster.MonsterMissile" name="void execute()" map="F"/>
  <method class="mrl.action.monster.MonsterMissile" name="boolean needsPosition()" map="Q"/>
  <method class="mrl.action.monster.MonsterMissile" name="java.lang.String getEffectWav()" map="V"/>
  <method class="mrl.action.monster.MonsterMissile" name="int solveDirection(sz.util.Position, sz.util.Position)" map="A"/>
  <method class="mrl.action.monster.MonsterMissile" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.monster.MonsterMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="mrl.action.monster.MonsterMissile" name="int getCost()" map="M"/>
  <class name="mrl.action.monster.SummonMonster" map="B"/>
  <field class="mrl.action.monster.SummonMonster" name="actionMessage" map="m"/>
  <field class="mrl.action.monster.SummonMonster" name="monsterId" map="n"/>
  <method class="mrl.action.monster.SummonMonster" name="void execute()" map="F"/>
  <method class="mrl.action.monster.SummonMonster" name="void set(java.lang.String, java.lang.String)" map="A"/>
  <method class="mrl.action.monster.SummonMonster" name="java.lang.String getID()" map="D"/>
  <class name="mrl.action.monster.MonsterCharge" map="C"/>
  <field class="mrl.action.monster.MonsterCharge" name="effectWav" map="o"/>
  <field class="mrl.action.monster.MonsterCharge" name="range" map="p"/>
  <field class="mrl.action.monster.MonsterCharge" name="damage" map="q"/>
  <field class="mrl.action.monster.MonsterCharge" name="message" map="r"/>
  <method class="mrl.action.monster.MonsterCharge" name="void execute()" map="F"/>
  <method class="mrl.action.monster.MonsterCharge" name="void set(int, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="mrl.action.monster.MonsterCharge" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.monster.MonsterCharge" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="mrl.action.monster.MonsterCharge" name="boolean needsDirection()" map="G"/>
  <method class="mrl.action.monster.MonsterCharge" name="int getCost()" map="M"/>
  <class name="mrl.action.monster.Kamikaze" map="D"/>
  <field class="mrl.action.monster.Kamikaze" name="actionMessage" map="s"/>
  <field class="mrl.action.monster.Kamikaze" name="damage" map="t"/>
  <method class="mrl.action.monster.Kamikaze" name="void execute()" map="F"/>
  <method class="mrl.action.monster.Kamikaze" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.monster.Kamikaze" name="void set(java.lang.String, int)" map="A"/>
  <class name="mrl.action.monster.MonsterWalk" map="E"/>
  <method class="mrl.action.monster.MonsterWalk" name="void execute()" map="F"/>
  <method class="mrl.action.monster.MonsterWalk" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.monster.MonsterWalk" name="boolean needsDirection()" map="G"/>
  <method class="mrl.action.monster.MonsterWalk" name="int getCost()" map="M"/>
  <class name="mrl.action.Walk" map="A"/>
  <field class="mrl.action.Walk" name="aPlayer" map="u"/>
  <method class="mrl.action.Walk" name="void execute()" map="F"/>
  <method class="mrl.action.Walk" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.Walk" name="boolean needsDirection()" map="G"/>
  <method class="mrl.action.Walk" name="int getCost()" map="M"/>
  <class name="mrl.action.FireSuperMissile" map="B"/>
  <field class="mrl.action.FireSuperMissile" name="player" map="v"/>
  <method class="mrl.action.FireSuperMissile" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.FireSuperMissile" name="sz.util.Position getPosition()" map="W"/>
  <method class="mrl.action.FireSuperMissile" name="void execute()" map="F"/>
  <method class="mrl.action.FireSuperMissile" name="boolean needsPosition()" map="Q"/>
  <method class="mrl.action.FireSuperMissile" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.FireSuperMissile" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.FireSuperMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="mrl.action.FireSuperMissile" name="int getCost()" map="M"/>
  <class name="mrl.action.Jump" map="C"/>
  <field class="mrl.action.Jump" name="aPlayer" map="w"/>
  <method class="mrl.action.Jump" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.Jump" name="void execute()" map="F"/>
  <method class="mrl.action.Jump" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.Jump" name="int getCost()" map="M"/>
  <class name="mrl.action.Action" map="D"/>
  <field class="mrl.action.Action" name="DOWNLEFT" map="A"/>
  <field class="mrl.action.Action" name="performer" map="B"/>
  <field class="mrl.action.Action" name="UPRIGHT" map="C"/>
  <field class="mrl.action.Action" name="UPLEFT" map="D"/>
  <field class="mrl.action.Action" name="UP" map="E"/>
  <field class="mrl.action.Action" name="invalidationMessage" map="F"/>
  <field class="mrl.action.Action" name="VARUR" map="G"/>
  <field class="mrl.action.Action" name="VARUP" map="H"/>
  <field class="mrl.action.Action" name="targetDirection" map="I"/>
  <field class="mrl.action.Action" name="VARUL" map="J"/>
  <field class="mrl.action.Action" name="targetPosition" map="K"/>
  <field class="mrl.action.Action" name="RIGHT" map="L"/>
  <field class="mrl.action.Action" name="VARLF" map="M"/>
  <field class="mrl.action.Action" name="VARDR" map="N"/>
  <field class="mrl.action.Action" name="VARRG" map="O"/>
  <field class="mrl.action.Action" name="LEFT" map="P"/>
  <field class="mrl.action.Action" name="VARDN" map="Q"/>
  <field class="mrl.action.Action" name="VARDL" map="R"/>
  <field class="mrl.action.Action" name="targetMultiItems" map="S"/>
  <field class="mrl.action.Action" name="VARSL" map="T"/>
  <field class="mrl.action.Action" name="DOWN" map="U"/>
  <field class="mrl.action.Action" name="SELF" map="V"/>
  <field class="mrl.action.Action" name="DOWNRIGHT" map="W"/>
  <method class="mrl.action.Action" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.Action" name="int toIntDirection(sz.util.Position)" map="A"/>
  <method class="mrl.action.Action" name="int toIntDirection(sz.csi.CharKey)" map="A"/>
  <method class="mrl.action.Action" name="java.lang.String getPromptMultiItems()" map="B"/>
  <method class="mrl.action.Action" name="boolean needsUnderlyingItem()" map="C"/>
  <method class="mrl.action.Action" name="void setMultiItems(java.util.Vector)" map="A"/>
  <method class="mrl.action.Action" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.Action" name="sz.util.Position getPositionalDirectionFrom(sz.util.Position, int)" map="A"/>
  <method class="mrl.action.Action" name="java.lang.String getPromptDirection()" map="E"/>
  <method class="mrl.action.Action" name="void execute()" map="F"/>
  <method class="mrl.action.Action" name="boolean needsDirection()" map="G"/>
  <method class="mrl.action.Action" name="boolean needsSpirits()" map="H"/>
  <method class="mrl.action.Action" name="java.lang.String getPrompUnderlyingItem()" map="I"/>
  <method class="mrl.action.Action" name="sz.util.Position getPositionalDirectionFrom(sz.util.Position)" map="B"/>
  <method class="mrl.action.Action" name="sz.util.Position antiVariation(sz.util.Position)" map="C"/>
  <method class="mrl.action.Action" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.Action" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="mrl.action.Action" name="java.lang.String getInvalidationMessage()" map="K"/>
  <method class="mrl.action.Action" name="void drawEffect(mrl.ui.effects.Effect)" map="A"/>
  <method class="mrl.action.Action" name="void setPosition(sz.util.Position)" map="D"/>
  <method class="mrl.action.Action" name="java.lang.String getPromptItem()" map="L"/>
  <method class="mrl.action.Action" name="int getCost()" map="M"/>
  <method class="mrl.action.Action" name="java.lang.String getPromptEquipedItem()" map="N"/>
  <method class="mrl.action.Action" name="boolean needsMultiItems()" map="O"/>
  <method class="mrl.action.Action" name="sz.util.Position directionToVariation(int)" map="A"/>
  <method class="mrl.action.Action" name="void setDirection(int)" map="B"/>
  <method class="mrl.action.Action" name="boolean needsEquipedItem()" map="P"/>
  <method class="mrl.action.Action" name="boolean needsPosition()" map="Q"/>
  <method class="mrl.action.Action" name="void setPerformer(mrl.actor.Actor)" map="B"/>
  <method class="mrl.action.Action" name="boolean needsItem()" map="R"/>
  <class name="mrl.action.SuperBomb" map="E"/>
  <method class="mrl.action.SuperBomb" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.SuperBomb" name="void execute()" map="F"/>
  <method class="mrl.action.SuperBomb" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.SuperBomb" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.SuperBomb" name="int getCost()" map="M"/>
  <class name="mrl.action.Fire" map="F"/>
  <field class="mrl.action.Fire" name="player" map="x"/>
  <method class="mrl.action.Fire" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.Fire" name="sz.util.Position getPosition()" map="X"/>
  <method class="mrl.action.Fire" name="sz.util.Position resolvePositionFromDirection()" map="Y"/>
  <method class="mrl.action.Fire" name="void execute()" map="F"/>
  <method class="mrl.action.Fire" name="boolean needsPosition()" map="Q"/>
  <method class="mrl.action.Fire" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.Fire" name="int getCost()" map="M"/>
  <method class="mrl.action.Fire" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="mrl.action.Fire" name="java.lang.String getSFX()" map="A"/>
  <class name="mrl.action.ActionFactory" map="G"/>
  <field class="mrl.action.ActionFactory" name="definitions" map="A"/>
  <field class="mrl.action.ActionFactory" name="singleton" map="B"/>
  <method class="mrl.action.ActionFactory" name="mrl.action.Action getAction(java.lang.String)" map="A"/>
  <method class="mrl.action.ActionFactory" name="void addDefinition(mrl.action.Action)" map="A"/>
  <method class="mrl.action.ActionFactory" name="mrl.action.ActionFactory getActionFactory()" map="A"/>
  <class name="mrl.action.BallMorph" map="H"/>
  <method class="mrl.action.BallMorph" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.BallMorph" name="void execute()" map="F"/>
  <method class="mrl.action.BallMorph" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.BallMorph" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.BallMorph" name="int getCost()" map="M"/>
  <class name="mrl.action.Bomb" map="I"/>
  <method class="mrl.action.Bomb" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.Bomb" name="void execute()" map="F"/>
  <method class="mrl.action.Bomb" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.Bomb" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.Bomb" name="int getCost()" map="M"/>
  <class name="mrl.action.FireMissile" map="J"/>
  <field class="mrl.action.FireMissile" name="player" map="y"/>
  <method class="mrl.action.FireMissile" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.FireMissile" name="sz.util.Position getPosition()" map="Z"/>
  <method class="mrl.action.FireMissile" name="void execute()" map="F"/>
  <method class="mrl.action.FireMissile" name="boolean needsPosition()" map="Q"/>
  <method class="mrl.action.FireMissile" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.FireMissile" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.FireMissile" name="java.lang.String getPromptPosition()" map="J"/>
  <method class="mrl.action.FireMissile" name="int getCost()" map="M"/>
  <class name="mrl.action.ChargeBeam" map="K"/>
  <method class="mrl.action.ChargeBeam" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.action.ChargeBeam" name="void execute()" map="F"/>
  <method class="mrl.action.ChargeBeam" name="java.lang.String getID()" map="D"/>
  <method class="mrl.action.ChargeBeam" name="boolean canPerform(mrl.actor.Actor)" map="A"/>
  <method class="mrl.action.ChargeBeam" name="int getCost()" map="M"/>
  <package name="mrl.actor" map="D"/>
  <class name="mrl.actor.Actor" map="A"/>
  <field class="mrl.actor.Actor" name="level" map="A"/>
  <field class="mrl.actor.Actor" name="positionz" map="B"/>
  <field class="mrl.actor.Actor" name="positiony" map="C"/>
  <field class="mrl.actor.Actor" name="positionx" map="D"/>
  <field class="mrl.actor.Actor" name="selector" map="E"/>
  <field class="mrl.actor.Actor" name="nextTime" map="F"/>
  <field class="mrl.actor.Actor" name="position" map="G"/>
  <field class="mrl.actor.Actor" name="appearance" map="H"/>
  <field class="mrl.actor.Actor" name="aWannaDie" map="I"/>
  <method class="mrl.actor.Actor" name="void setSelector(mrl.ai.ActionSelector)" map="A"/>
  <method class="mrl.actor.Actor" name="void execute(mrl.action.Action)" map="A"/>
  <method class="mrl.actor.Actor" name="mrl.ai.ActionSelector getSelector()" map="B"/>
  <method class="mrl.actor.Actor" name="java.lang.Object clone()" map="clone"/>
  <method class="mrl.actor.Actor" name="void reduceCost(int)" map="A"/>
  <method class="mrl.actor.Actor" name="sz.util.Position getPosition()" map="C"/>
  <method class="mrl.actor.Actor" name="void die()" map="D"/>
  <method class="mrl.actor.Actor" name="void message(java.lang.String)" map="A"/>
  <method class="mrl.actor.Actor" name="void setAppearance(mrl.ui.Appearance)" map="A"/>
  <method class="mrl.actor.Actor" name="void setLevel(mrl.level.Level)" map="A"/>
  <method class="mrl.actor.Actor" name="void act()" map="E"/>
  <method class="mrl.actor.Actor" name="void setPosition(sz.util.Position)" map="A"/>
  <method class="mrl.actor.Actor" name="boolean wannaDie()" map="F"/>
  <method class="mrl.actor.Actor" name="void setPosition(int, int, int)" map="A"/>
  <method class="mrl.actor.Actor" name="mrl.ui.Appearance getAppearance()" map="G"/>
  <method class="mrl.actor.Actor" name="void setNextTime(int)" map="B"/>
  <method class="mrl.actor.Actor" name="int getCost()" map="A"/>
  <method class="mrl.actor.Actor" name="java.lang.String getDescription()" map="H"/>
  <method class="mrl.actor.Actor" name="void updateStatus()" map="I"/>
  <method class="mrl.actor.Actor" name="mrl.level.Level getLevel()" map="J"/>
  <class name="mrl.actor.Message" map="B"/>
  <field class="mrl.actor.Message" name="location" map="A"/>
  <field class="mrl.actor.Message" name="text" map="B"/>
  <method class="mrl.actor.Message" name="sz.util.Position getLocation()" map="A"/>
  <method class="mrl.actor.Message" name="java.lang.String getText()" map="B"/>
  <method class="mrl.actor.Message" name="java.lang.String toString()" map="toString"/>
  <package name="mrl.data" map="E"/>
  <class name="mrl.data.MonsterLoader" map="A"/>
  <method class="mrl.data.MonsterLoader" name="mrl.monster.MonsterDefinition[] getMonsterDefinitions(java.lang.String)" map="A"/>
  <class name="mrl.data.MonsterDocumentHandler" map="B"/>
  <field class="mrl.data.MonsterDocumentHandler" name="currentRangedAttacks" map="A"/>
  <field class="mrl.data.MonsterDocumentHandler" name="defVector" map="B"/>
  <field class="mrl.data.MonsterDocumentHandler" name="currentSelector" map="C"/>
  <field class="mrl.data.MonsterDocumentHandler" name="currentMD" map="D"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void endElement(java.lang.String)" map="endElement"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void setDocumentLocator(org.xml.sax.Locator)" map="setDocumentLocator"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void processingInstruction(java.lang.String, java.lang.String)" map="processingInstruction"/>
  <method class="mrl.data.MonsterDocumentHandler" name="int inte(java.lang.String)" map="A"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void ignorableWhitespace(char[], int, int)" map="ignorableWhitespace"/>
  <method class="mrl.data.MonsterDocumentHandler" name="java.util.Vector getMonsterDefinitions()" map="A"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void skippedEntity(java.lang.String)" map="B"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void endDocument()" map="endDocument"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void startPrefixMapping(java.lang.String, java.lang.String)" map="A"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void endPrefixMapping(java.lang.String)" map="C"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void startElement(java.lang.String, org.xml.sax.AttributeList)" map="startElement"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void characters(char[], int, int)" map="characters"/>
  <method class="mrl.data.MonsterDocumentHandler" name="void startDocument()" map="startDocument"/>
  <class name="mrl.data.Features" map="C"/>
  <method class="mrl.data.Features" name="mrl.feature.Feature[] getFeatureDefinitions(mrl.ui.AppearanceFactory)" map="A"/>
  <class name="mrl.data.SmartFeatures" map="D"/>
  <method class="mrl.data.SmartFeatures" name="mrl.feature.SmartFeature[] getSmartFeatures(mrl.ai.SelectorFactory)" map="A"/>
  <class name="mrl.data.Cells" map="E"/>
  <method class="mrl.data.Cells" name="mrl.level.Cell[] getCellDefinitions(mrl.ui.AppearanceFactory)" map="A"/>
  <package name="mrl.conf" map="F"/>
  <package name="mrl.conf.console" map="A"/>
  <package name="mrl.conf.console.data" map="A"/>
  <class name="mrl.conf.console.data.CharEffects" map="A"/>
  <field class="mrl.conf.console.data.CharEffects" name="SFX_BIBLE_STEPS" map="A"/>
  <field class="mrl.conf.console.data.CharEffects" name="effects" map="B"/>
  <method class="mrl.conf.console.data.CharEffects" name="mrl.ui.consoleUI.effects.CharEffect[] getEffects()" map="A"/>
  <class name="mrl.conf.console.data.CharCuts" map="B"/>
  <field class="mrl.conf.console.data.CharCuts" name="thus" map="A"/>
  <field class="mrl.conf.console.data.CharCuts" name="hashCuts" map="B"/>
  <method class="mrl.conf.console.data.CharCuts" name="mrl.ui.consoleUI.cuts.CharChat get(java.lang.String)" map="A"/>
  <method class="mrl.conf.console.data.CharCuts" name="void initializeSingleton()" map="A"/>
  <class name="mrl.conf.console.data.CharAppearances" map="C"/>
  <field class="mrl.conf.console.data.CharAppearances" name="defs" map="A"/>
  <method class="mrl.conf.console.data.CharAppearances" name="mrl.ui.Appearance[] getAppearances()" map="A"/>
  <package name="mrl.ai" map="G"/>
  <class name="mrl.ai.SelectorFactory" map="A"/>
  <field class="mrl.ai.SelectorFactory" name="definitions" map="A"/>
  <field class="mrl.ai.SelectorFactory" name="singleton" map="B"/>
  <method class="mrl.ai.SelectorFactory" name="mrl.ai.SelectorFactory getSelectorFactory()" map="A"/>
  <method class="mrl.ai.SelectorFactory" name="mrl.ai.ActionSelector createSelector(java.lang.String)" map="A"/>
  <method class="mrl.ai.SelectorFactory" name="void addDefinition(mrl.ai.ActionSelector)" map="A"/>
  <method class="mrl.ai.SelectorFactory" name="mrl.ai.ActionSelector getSelector(java.lang.String)" map="B"/>
  <class name="mrl.ai.BasicMonsterAI" map="B"/>
  <field class="mrl.ai.BasicMonsterAI" name="isStationary" map="C"/>
  <field class="mrl.ai.BasicMonsterAI" name="changeDirection" map="D"/>
  <field class="mrl.ai.BasicMonsterAI" name="approachLimit" map="E"/>
  <field class="mrl.ai.BasicMonsterAI" name="waitPlayerRange" map="F"/>
  <field class="mrl.ai.BasicMonsterAI" name="chargeCounter" map="G"/>
  <field class="mrl.ai.BasicMonsterAI" name="lastDirection" map="H"/>
  <field class="mrl.ai.BasicMonsterAI" name="patrolRange" map="I"/>
  <field class="mrl.ai.BasicMonsterAI" name="lastPlayerPosition" map="J"/>
  <method class="mrl.ai.BasicMonsterAI" name="int getPatrolRange()" map="C"/>
  <method class="mrl.ai.BasicMonsterAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <method class="mrl.ai.BasicMonsterAI" name="java.lang.String getID()" map="B"/>
  <method class="mrl.ai.BasicMonsterAI" name="void setWaitPlayerRange(int)" map="A"/>
  <method class="mrl.ai.BasicMonsterAI" name="void setPatrolRange(int)" map="B"/>
  <method class="mrl.ai.BasicMonsterAI" name="void setStationary(boolean)" map="A"/>
  <method class="mrl.ai.BasicMonsterAI" name="void setApproachLimit(int)" map="C"/>
  <method class="mrl.ai.BasicMonsterAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.ai.BasicMonsterAI" name="void setChangeDirection(boolean)" map="B"/>
  <class name="mrl.ai.ActionSelector" map="C"/>
  <method class="mrl.ai.ActionSelector" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.ai.ActionSelector" name="java.lang.String getID()" map="B"/>
  <method class="mrl.ai.ActionSelector" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="mrl.ai.RangedAttack" map="D"/>
  <field class="mrl.ai.RangedAttack" name="attackType" map="A"/>
  <field class="mrl.ai.RangedAttack" name="attackMessage" map="B"/>
  <field class="mrl.ai.RangedAttack" name="summonMonsterId" map="C"/>
  <field class="mrl.ai.RangedAttack" name="effectType" map="D"/>
  <field class="mrl.ai.RangedAttack" name="chargeCounter" map="E"/>
  <field class="mrl.ai.RangedAttack" name="attackId" map="F"/>
  <field class="mrl.ai.RangedAttack" name="range" map="G"/>
  <field class="mrl.ai.RangedAttack" name="damage" map="H"/>
  <field class="mrl.ai.RangedAttack" name="frequency" map="I"/>
  <field class="mrl.ai.RangedAttack" name="effectID" map="J"/>
  <field class="mrl.ai.RangedAttack" name="statusEffect" map="K"/>
  <field class="mrl.ai.RangedAttack" name="effectWav" map="L"/>
  <method class="mrl.ai.RangedAttack" name="int getDamage()" map="A"/>
  <method class="mrl.ai.RangedAttack" name="void setSummonMonsterId(java.lang.String)" map="A"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getEffectID()" map="B"/>
  <method class="mrl.ai.RangedAttack" name="int getFrequency()" map="C"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getEffectType()" map="D"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getAttackId()" map="E"/>
  <method class="mrl.ai.RangedAttack" name="void setEffectWav(java.lang.String)" map="B"/>
  <method class="mrl.ai.RangedAttack" name="int getRange()" map="F"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getEffectWav()" map="G"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getAttackMessage()" map="H"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getStatusEffect()" map="I"/>
  <method class="mrl.ai.RangedAttack" name="int getChargeCounter()" map="J"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getSummonMonsterId()" map="K"/>
  <method class="mrl.ai.RangedAttack" name="java.lang.String getAttackType()" map="L"/>
  <method class="mrl.ai.RangedAttack" name="void setChargeCounter(int)" map="A"/>
  <class name="mrl.ai.MonsterAI" map="E"/>
  <field class="mrl.ai.MonsterAI" name="rangedAttacks" map="B"/>
  <method class="mrl.ai.MonsterAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.ai.MonsterAI" name="void setRangedAttacks(java.util.Vector)" map="A"/>
  <method class="mrl.ai.MonsterAI" name="java.lang.String getID()" map="B"/>
  <method class="mrl.ai.MonsterAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <package name="mrl.ui" map="H"/>
  <package name="mrl.ui.consoleUI" map="A"/>
  <package name="mrl.ui.consoleUI.cuts" map="A"/>
  <class name="mrl.ui.consoleUI.cuts.CharChat" map="A"/>
  <field class="mrl.ui.consoleUI.cuts.CharChat" name="conversations" map="A"/>
  <field class="mrl.ui.consoleUI.cuts.CharChat" name="names" map="B"/>
  <method class="mrl.ui.consoleUI.cuts.CharChat" name="void add(java.lang.String, java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.cuts.CharChat" name="int getConversations()" map="A"/>
  <method class="mrl.ui.consoleUI.cuts.CharChat" name="java.lang.String getName(int)" map="A"/>
  <method class="mrl.ui.consoleUI.cuts.CharChat" name="java.lang.String getConversation(int)" map="B"/>
  <package name="mrl.ui.consoleUI.effects" map="B"/>
  <class name="mrl.ui.consoleUI.effects.CharDirectedEffect" map="A"/>
  <field class="mrl.ui.consoleUI.effects.CharDirectedEffect" name="depth" map="T"/>
  <field class="mrl.ui.consoleUI.effects.CharDirectedEffect" name="effectLine" map="U"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectedEffect" name="int getDepth()" map="F"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectedEffect" name="void setDepth(int)" map="C"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectedEffect" name="void set(sz.util.Position, sz.util.Position, sz.util.Position, int)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharIconMissileEffect" map="B"/>
  <field class="mrl.ui.consoleUI.effects.CharIconMissileEffect" name="missile" map="V"/>
  <field class="mrl.ui.consoleUI.effects.CharIconMissileEffect" name="misColor" map="W"/>
  <method class="mrl.ui.consoleUI.effects.CharIconMissileEffect" name="void setMissile(char)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharIconMissileEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharIconMissileEffect" name="void setMisColor(int)" map="D"/>
  <class name="mrl.ui.consoleUI.effects.CharEffect" map="C"/>
  <method class="mrl.ui.consoleUI.effects.CharEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharAnimatedMissileEffect" map="D"/>
  <field class="mrl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="missile" map="X"/>
  <field class="mrl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="misColor" map="Y"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="void setMisColor(int)" map="E"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedMissileEffect" name="void setMissile(java.lang.String)" map="B"/>
  <class name="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" map="E"/>
  <field class="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="missile" map="Z"/>
  <field class="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="misColor" map="_"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="void setMisColor(int)" map="F"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="void setMissile(java.lang.String)" map="C"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectionalMissileEffect" name="int solveDirection(sz.util.Position, sz.util.Position)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharAnimatedEffect" map="F"/>
  <field class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="color" map="D"/>
  <field class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="frames" map="E"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="java.lang.String getFrames()" map="D"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="void setColor(int)" map="B"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="void setFrames(java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharAnimatedEffect" name="int getColor()" map="E"/>
  <class name="mrl.ui.consoleUI.effects.CharSplashEffect" map="G"/>
  <field class="mrl.ui.consoleUI.effects.CharSplashEffect" name="color" map="F"/>
  <field class="mrl.ui.consoleUI.effects.CharSplashEffect" name="tiles" map="G"/>
  <field class="mrl.ui.consoleUI.effects.CharSplashEffect" name="si" map="H"/>
  <field class="mrl.ui.consoleUI.effects.CharSplashEffect" name="ui" map="I"/>
  <method class="mrl.ui.consoleUI.effects.CharSplashEffect" name="void drawCircle(mrl.ui.consoleUI.ConsoleUserInterface, sz.util.Position, int, char, int)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharSplashEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharSplashEffect" name="void drawCirclePixels(mrl.ui.consoleUI.ConsoleUserInterface, sz.util.Position, int, int, char, int)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharSequentialEffect" map="H"/>
  <field class="mrl.ui.consoleUI.effects.CharSequentialEffect" name="color" map="J"/>
  <field class="mrl.ui.consoleUI.effects.CharSequentialEffect" name="tiles" map="K"/>
  <field class="mrl.ui.consoleUI.effects.CharSequentialEffect" name="sequence" map="L"/>
  <method class="mrl.ui.consoleUI.effects.CharSequentialEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharBeamMissileEffect" map="I"/>
  <field class="mrl.ui.consoleUI.effects.CharBeamMissileEffect" name="missile" map="a"/>
  <field class="mrl.ui.consoleUI.effects.CharBeamMissileEffect" name="misColor" map="b"/>
  <method class="mrl.ui.consoleUI.effects.CharBeamMissileEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharBeamMissileEffect" name="void setMisColor(int)" map="G"/>
  <method class="mrl.ui.consoleUI.effects.CharBeamMissileEffect" name="void setMissile(java.lang.String)" map="D"/>
  <class name="mrl.ui.consoleUI.effects.CharEffectFactory" map="J"/>
  <field class="mrl.ui.consoleUI.effects.CharEffectFactory" name="effects" map="B"/>
  <method class="mrl.ui.consoleUI.effects.CharEffectFactory" name="void setEffects(mrl.ui.effects.Effect[])" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharEffectFactory" name="mrl.ui.effects.Effect createDirectedEffect(sz.util.Position, sz.util.Position, java.lang.String, int)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharEffectFactory" name="mrl.ui.effects.Effect createLocatedEffect(sz.util.Position, java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.effects.CharEffectFactory" name="mrl.ui.effects.Effect createDirectionalEffect(sz.util.Position, int, int, java.lang.String)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharMeleeEffect" map="K"/>
  <field class="mrl.ui.consoleUI.effects.CharMeleeEffect" name="color" map="R"/>
  <field class="mrl.ui.consoleUI.effects.CharMeleeEffect" name="directionMissileChars" map="S"/>
  <method class="mrl.ui.consoleUI.effects.CharMeleeEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharFlashEffect" map="L"/>
  <field class="mrl.ui.consoleUI.effects.CharFlashEffect" name="color" map="M"/>
  <method class="mrl.ui.consoleUI.effects.CharFlashEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharIconEffect" map="M"/>
  <field class="mrl.ui.consoleUI.effects.CharIconEffect" name="color" map="N"/>
  <field class="mrl.ui.consoleUI.effects.CharIconEffect" name="tile" map="O"/>
  <method class="mrl.ui.consoleUI.effects.CharIconEffect" name="void drawEffect(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.ConsoleSystemInterface)" map="A"/>
  <class name="mrl.ui.consoleUI.effects.CharDirectionalEffect" map="N"/>
  <field class="mrl.ui.consoleUI.effects.CharDirectionalEffect" name="direction" map="P"/>
  <field class="mrl.ui.consoleUI.effects.CharDirectionalEffect" name="depth" map="Q"/>
  <method class="mrl.ui.consoleUI.effects.CharDirectionalEffect" name="void set(sz.util.Position, int, int)" map="A"/>
  <class name="mrl.ui.consoleUI.CharPlayerGenerator" map="A"/>
  <field class="mrl.ui.consoleUI.CharPlayerGenerator" name="si" map="C"/>
  <method class="mrl.ui.consoleUI.CharPlayerGenerator" name="mrl.player.Player generatePlayer()" map="A"/>
  <class name="mrl.ui.consoleUI.CharAppearance" map="B"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="character" map="B"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="GREEN" map="C"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="GRAY" map="D"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="TEAL" map="E"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="BLACK" map="F"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="BLUE" map="G"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="RED" map="H"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="LIGHT_GRAY" map="I"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="DARK_RED" map="J"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="BROWN" map="K"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="CYAN" map="L"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="color" map="M"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="MAGENTA" map="N"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="YELLOW" map="O"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="DARK_BLUE" map="P"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="WHITE" map="Q"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="VOID" map="R"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="PURPLE" map="S"/>
  <field class="mrl.ui.consoleUI.CharAppearance" name="LEMON" map="T"/>
  <method class="mrl.ui.consoleUI.CharAppearance" name="int getColor(java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.CharAppearance" name="int getColor()" map="B"/>
  <method class="mrl.ui.consoleUI.CharAppearance" name="char getChar()" map="C"/>
  <method class="mrl.ui.consoleUI.CharAppearance" name="mrl.ui.consoleUI.CharAppearance getVoidAppearance()" map="D"/>
  <class name="mrl.ui.consoleUI.CharDisplay" map="C"/>
  <field class="mrl.ui.consoleUI.CharDisplay" name="si" map="B"/>
  <field class="mrl.ui.consoleUI.CharDisplay" name="mapImage" map="C"/>
  <field class="mrl.ui.consoleUI.CharDisplay" name="locationKeys" map="D"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showNav(java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void init(sz.csi.ConsoleSystemInterface)" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="boolean showResumeScreen(mrl.player.Player)" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showHelp()" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showEndgame(mrl.player.Player)" map="B"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="int showTitleScreen()" map="B"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showScreen(java.lang.Object)" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showMap(java.lang.String, java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showIntro(mrl.player.Player)" map="C"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showHiscores(mrl.player.HiScore[])" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="void showChat(java.lang.String, mrl.game.Game)" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="int showSavedGames(java.io.File[])" map="A"/>
  <method class="mrl.ui.consoleUI.CharDisplay" name="int readAlphaToNumber(int)" map="A"/>
  <class name="mrl.ui.consoleUI.ConsoleUserInterface$UISelector" map="_A"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface$UISelector" name="this$0" map="this$0"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface$UISelector" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface$UISelector" name="java.lang.String getID()" map="B"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface$UISelector" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="mrl.ui.consoleUI.ConsoleUserInterface" map="D"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="sightListItems" map="l"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="lastMessage" map="m"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="VP_END" map="n"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="xrange" map="o"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="messageBox" map="p"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="lockedMonster" map="q"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="yrange" map="r"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="PC_POS" map="s"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="FOVMask" map="t"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="messageHistory" map="u"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="idList" map="v"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="VP_START" map="w"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="eraseOnArrival" map="x"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="selector" map="y"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="msgCounter" map="z"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="SOUL_OPTIONS" map="&#x00a2;"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="si" map="&#x00a3;"/>
  <field class="mrl.ui.consoleUI.ConsoleUserInterface" name="messageBuffer" map="&#x00a4;"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="boolean isDisplaying(mrl.actor.Actor)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void run()" map="run"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="java.util.Vector getMessageBuffer()" map="D"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.ai.ActionSelector getSelector()" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void processSave()" map="K"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void access$9(mrl.ui.consoleUI.ConsoleUserInterface, mrl.action.Action)" map="access$9"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position pickPosition(java.lang.String)" map="C"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void processQuit()" map="I"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="boolean prompt()" map="G"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="boolean isOnFOVMask(int, int)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void setTargets(mrl.action.Action)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void access$8(mrl.ui.consoleUI.ConsoleUserInterface, sz.util.Position)" map="access$8"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.action.Action access$2(mrl.ui.consoleUI.ConsoleUserInterface, sz.csi.CharKey)" map="access$2"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void showMessage(java.lang.String)" map="B"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void showMessageHistory()" map="N"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position access$7(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$7"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void waitKey()" map="O"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="int pickDirection(java.lang.String)" map="D"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void drawLevel()" map="P"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void doLook()" map="M"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void drawLineTo(int, int, char, int)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void refresh()" map="C"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.action.Action selectCommand(sz.csi.CharKey)" map="B"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.action.Action access$6(mrl.ui.consoleUI.ConsoleUserInterface, int)" map="access$6"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void showSystemMessage(java.lang.String)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void drawEffect(mrl.ui.effects.Effect)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position getNearestMonsterPosition()" map="Q"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.action.Action showSkills()" map="H"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="sz.csi.ConsoleSystemInterface access$1(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$1"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="sz.util.Position getAbsolutePosition(sz.util.Position)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void init(sz.csi.ConsoleSystemInterface, mrl.ui.UserAction[], mrl.ui.UserCommand[], mrl.action.Action, mrl.action.Action, mrl.action.Action)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.action.Action access$5(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$5"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.action.Action access$4(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$4"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void cleanViewPort()" map="R"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="boolean access$0(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$0"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.player.Player access$3(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$3"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void commandSelected(int)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="mrl.level.Level access$10(mrl.ui.consoleUI.ConsoleUserInterface)" map="access$10"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void showPlayerStats()" map="F"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="boolean insideViewPort(sz.util.Position)" map="B"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void addMessage(mrl.actor.Message)" map="A"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="void drawPlayerStatus()" map="S"/>
  <method class="mrl.ui.consoleUI.ConsoleUserInterface" name="boolean insideViewPort(int, int)" map="B"/>
  <package name="mrl.ui.effects" map="B"/>
  <class name="mrl.ui.effects.Effect" map="A"/>
  <field class="mrl.ui.effects.Effect" name="position" map="A"/>
  <field class="mrl.ui.effects.Effect" name="animationDelay" map="B"/>
  <field class="mrl.ui.effects.Effect" name="id" map="C"/>
  <method class="mrl.ui.effects.Effect" name="void setPosition(sz.util.Position)" map="A"/>
  <method class="mrl.ui.effects.Effect" name="sz.util.Position getPosition()" map="A"/>
  <method class="mrl.ui.effects.Effect" name="java.lang.String getID()" map="B"/>
  <method class="mrl.ui.effects.Effect" name="void animationPause()" map="C"/>
  <method class="mrl.ui.effects.Effect" name="void setAnimationDelay(int)" map="A"/>
  <method class="mrl.ui.effects.Effect" name="void set(sz.util.Position)" map="B"/>
  <class name="mrl.ui.effects.VEffect" map="B"/>
  <field class="mrl.ui.effects.VEffect" name="effects" map="A"/>
  <method class="mrl.ui.effects.VEffect" name="int size()" map="A"/>
  <method class="mrl.ui.effects.VEffect" name="void erase()" map="B"/>
  <method class="mrl.ui.effects.VEffect" name="mrl.ui.effects.Effect getEffect(int)" map="A"/>
  <method class="mrl.ui.effects.VEffect" name="void addEffect(mrl.ui.effects.Effect)" map="A"/>
  <class name="mrl.ui.effects.EffectFactory" map="C"/>
  <field class="mrl.ui.effects.EffectFactory" name="singleton" map="A"/>
  <method class="mrl.ui.effects.EffectFactory" name="mrl.ui.effects.EffectFactory getSingleton()" map="A"/>
  <method class="mrl.ui.effects.EffectFactory" name="mrl.ui.effects.Effect createDirectedEffect(sz.util.Position, sz.util.Position, java.lang.String, int)" map="A"/>
  <method class="mrl.ui.effects.EffectFactory" name="void setSingleton(mrl.ui.effects.EffectFactory)" map="A"/>
  <method class="mrl.ui.effects.EffectFactory" name="mrl.ui.effects.Effect createLocatedEffect(sz.util.Position, java.lang.String)" map="A"/>
  <method class="mrl.ui.effects.EffectFactory" name="mrl.ui.effects.Effect createDirectionalEffect(sz.util.Position, int, int, java.lang.String)" map="A"/>
  <class name="mrl.ui.UserInterface" map="A"/>
  <field class="mrl.ui.UserInterface" name="level" map="Q"/>
  <field class="mrl.ui.UserInterface" name="itemsOnSight" map="R"/>
  <field class="mrl.ui.UserInterface" name="lastMessage" map="S"/>
  <field class="mrl.ui.UserInterface" name="verboseSkills" map="T"/>
  <field class="mrl.ui.UserInterface" name="gameOver" map="U"/>
  <field class="mrl.ui.UserInterface" name="quitMessages" map="V"/>
  <field class="mrl.ui.UserInterface" name="gameActions" map="W"/>
  <field class="mrl.ui.UserInterface" name="gameCommands" map="X"/>
  <field class="mrl.ui.UserInterface" name="singleton" map="Y"/>
  <field class="mrl.ui.UserInterface" name="FOVMask" map="Z"/>
  <field class="mrl.ui.UserInterface" name="defaultTarget" map="_"/>
  <field class="mrl.ui.UserInterface" name="advance" map="a"/>
  <field class="mrl.ui.UserInterface" name="eraseOnArrival" map="b"/>
  <field class="mrl.ui.UserInterface" name="player" map="c"/>
  <field class="mrl.ui.UserInterface" name="monstersOnSight" map="d"/>
  <field class="mrl.ui.UserInterface" name="attack" map="e"/>
  <field class="mrl.ui.UserInterface" name="commandListeners" map="f"/>
  <field class="mrl.ui.UserInterface" name="SOUL_OPTIONS" map="g"/>
  <field class="mrl.ui.UserInterface" name="actionSelectedByCommand" map="h"/>
  <field class="mrl.ui.UserInterface" name="si" map="i"/>
  <field class="mrl.ui.UserInterface" name="featuresOnSight" map="j"/>
  <field class="mrl.ui.UserInterface" name="target" map="k"/>
  <method class="mrl.ui.UserInterface" name="void setSingleton(mrl.ui.UserInterface)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void setPlayer(mrl.player.Player)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void init(mrl.ui.UserAction[], mrl.ui.UserCommand[], mrl.action.Action, mrl.action.Action, mrl.action.Action)" map="A"/>
  <method class="mrl.ui.UserInterface" name="mrl.action.Action getRelatedAction(int)" map="B"/>
  <method class="mrl.ui.UserInterface" name="void setGameOver(boolean)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void commandSelected(int)" map="A"/>
  <method class="mrl.ui.UserInterface" name="mrl.ai.ActionSelector getSelector()" map="A"/>
  <method class="mrl.ui.UserInterface" name="mrl.ui.UserInterface getUI()" map="B"/>
  <method class="mrl.ui.UserInterface" name="void refresh()" map="C"/>
  <method class="mrl.ui.UserInterface" name="java.util.Vector getMessageBuffer()" map="D"/>
  <method class="mrl.ui.UserInterface" name="java.util.Vector getLevelUpSouls()" map="E"/>
  <method class="mrl.ui.UserInterface" name="mrl.action.Action selectCommand(sz.csi.CharKey)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void showPlayerStats()" map="F"/>
  <method class="mrl.ui.UserInterface" name="void addCommandListener(mrl.ui.CommandListener)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void informPlayerCommand(int)" map="C"/>
  <method class="mrl.ui.UserInterface" name="void showSystemMessage(java.lang.String)" map="A"/>
  <method class="mrl.ui.UserInterface" name="boolean prompt()" map="G"/>
  <method class="mrl.ui.UserInterface" name="mrl.action.Action showSkills()" map="H"/>
  <method class="mrl.ui.UserInterface" name="void processQuit()" map="I"/>
  <method class="mrl.ui.UserInterface" name="void drawEffect(mrl.ui.effects.Effect)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void levelChange()" map="J"/>
  <method class="mrl.ui.UserInterface" name="void processSave()" map="K"/>
  <method class="mrl.ui.UserInterface" name="mrl.player.Player getPlayer()" map="L"/>
  <method class="mrl.ui.UserInterface" name="int getRelatedCommand(int)" map="D"/>
  <method class="mrl.ui.UserInterface" name="boolean isDisplaying(mrl.actor.Actor)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void removeCommandListener(mrl.ui.CommandListener)" map="B"/>
  <method class="mrl.ui.UserInterface" name="boolean isOnFOVMask(int, int)" map="A"/>
  <method class="mrl.ui.UserInterface" name="void doLook()" map="M"/>
  <method class="mrl.ui.UserInterface" name="void showMessage(java.lang.String)" map="B"/>
  <method class="mrl.ui.UserInterface" name="void addMessage(mrl.actor.Message)" map="A"/>
  <class name="mrl.ui.UserCommand" map="B"/>
  <field class="mrl.ui.UserCommand" name="keyCode" map="A"/>
  <field class="mrl.ui.UserCommand" name="command" map="B"/>
  <method class="mrl.ui.UserCommand" name="void setKeyCode(int)" map="A"/>
  <method class="mrl.ui.UserCommand" name="int getCommand()" map="A"/>
  <method class="mrl.ui.UserCommand" name="int getKeyCode()" map="B"/>
  <class name="mrl.ui.Display" map="C"/>
  <field class="mrl.ui.Display" name="thus" map="A"/>
  <method class="mrl.ui.Display" name="void showNav(java.lang.String)" map="A"/>
  <method class="mrl.ui.Display" name="boolean showResumeScreen(mrl.player.Player)" map="A"/>
  <method class="mrl.ui.Display" name="void showHelp()" map="A"/>
  <method class="mrl.ui.Display" name="void showEndgame(mrl.player.Player)" map="B"/>
  <method class="mrl.ui.Display" name="int showTitleScreen()" map="B"/>
  <method class="mrl.ui.Display" name="void showScreen(java.lang.Object)" map="A"/>
  <method class="mrl.ui.Display" name="void showMap(java.lang.String, java.lang.String)" map="A"/>
  <method class="mrl.ui.Display" name="void showIntro(mrl.player.Player)" map="C"/>
  <method class="mrl.ui.Display" name="void showHiscores(mrl.player.HiScore[])" map="A"/>
  <method class="mrl.ui.Display" name="void showChat(java.lang.String, mrl.game.Game)" map="A"/>
  <method class="mrl.ui.Display" name="int showSavedGames(java.io.File[])" map="A"/>
  <class name="mrl.ui.Appearance" map="D"/>
  <field class="mrl.ui.Appearance" name="ID" map="A"/>
  <method class="mrl.ui.Appearance" name="java.lang.String getID()" map="A"/>
  <class name="mrl.ui.CommandListener" map="E"/>
  <field class="mrl.ui.CommandListener" name="SHOWINVEN" map="A"/>
  <field class="mrl.ui.CommandListener" name="SHOWMAP" map="B"/>
  <field class="mrl.ui.CommandListener" name="SHOWMESSAGEHISTORY" map="C"/>
  <field class="mrl.ui.CommandListener" name="HELP" map="D"/>
  <field class="mrl.ui.CommandListener" name="QUIT" map="E"/>
  <field class="mrl.ui.CommandListener" name="RESTART" map="F"/>
  <field class="mrl.ui.CommandListener" name="PROMPTQUIT" map="G"/>
  <field class="mrl.ui.CommandListener" name="SAVE" map="H"/>
  <field class="mrl.ui.CommandListener" name="LOOK" map="I"/>
  <field class="mrl.ui.CommandListener" name="REMOVELOCK" map="J"/>
  <field class="mrl.ui.CommandListener" name="PROMPTSAVE" map="K"/>
  <field class="mrl.ui.CommandListener" name="SHOWSTATS" map="L"/>
  <field class="mrl.ui.CommandListener" name="NONE" map="M"/>
  <field class="mrl.ui.CommandListener" name="SHOWSKILLS" map="N"/>
  <field class="mrl.ui.CommandListener" name="SHOWHISCORES" map="O"/>
  <field class="mrl.ui.CommandListener" name="SHOWUNEQUIP" map="P"/>
  <method class="mrl.ui.CommandListener" name="void commandSelected(int)" map="A"/>
  <class name="mrl.ui.AppearanceFactory" map="F"/>
  <field class="mrl.ui.AppearanceFactory" name="definitions" map="A"/>
  <field class="mrl.ui.AppearanceFactory" name="singleton" map="B"/>
  <method class="mrl.ui.AppearanceFactory" name="mrl.ui.Appearance getAppearance(java.lang.String)" map="A"/>
  <method class="mrl.ui.AppearanceFactory" name="mrl.ui.AppearanceFactory getAppearanceFactory()" map="A"/>
  <method class="mrl.ui.AppearanceFactory" name="void addDefinition(mrl.ui.Appearance)" map="A"/>
  <class name="mrl.ui.RefreshActor" map="G"/>
  <field class="mrl.ui.RefreshActor" name="REFRESHVIEWPORT" map="M"/>
  <field class="mrl.ui.RefreshActor" name="opCode" map="N"/>
  <field class="mrl.ui.RefreshActor" name="singleton" map="O"/>
  <field class="mrl.ui.RefreshActor" name="NONE" map="P"/>
  <method class="mrl.ui.RefreshActor" name="mrl.ui.RefreshActor getRefreshActor(int)" map="C"/>
  <method class="mrl.ui.RefreshActor" name="int getOpCode()" map="N"/>
  <method class="mrl.ui.RefreshActor" name="void setOpCode(int)" map="D"/>
  <method class="mrl.ui.RefreshActor" name="void act()" map="E"/>
  <class name="mrl.ui.UserAction" map="H"/>
  <field class="mrl.ui.UserAction" name="action" map="A"/>
  <field class="mrl.ui.UserAction" name="keyCode" map="B"/>
  <method class="mrl.ui.UserAction" name="mrl.action.Action getAction()" map="A"/>
  <method class="mrl.ui.UserAction" name="void setKeyCode(int)" map="A"/>
  <method class="mrl.ui.UserAction" name="void setAction(mrl.action.Action)" map="A"/>
  <method class="mrl.ui.UserAction" name="int getKeyCode()" map="B"/>
  <class name="mrl.ui.ActionCancelException" map="I"/>
  <package name="mrl.monster" map="I"/>
  <class name="mrl.monster.MonsterFactory" map="A"/>
  <field class="mrl.monster.MonsterFactory" name="vDefinitions" map="A"/>
  <field class="mrl.monster.MonsterFactory" name="definitions" map="B"/>
  <field class="mrl.monster.MonsterFactory" name="singleton" map="C"/>
  <field class="mrl.monster.MonsterFactory" name="lastSpawnLocation" map="D"/>
  <method class="mrl.monster.MonsterFactory" name="void printAppearances()" map="A"/>
  <method class="mrl.monster.MonsterFactory" name="mrl.monster.Monster buildMonster(java.lang.String)" map="A"/>
  <method class="mrl.monster.MonsterFactory" name="int getLastSpawnPosition()" map="B"/>
  <method class="mrl.monster.MonsterFactory" name="void init(mrl.monster.MonsterDefinition[])" map="A"/>
  <method class="mrl.monster.MonsterFactory" name="mrl.monster.MonsterDefinition getDefinition(java.lang.String)" map="B"/>
  <method class="mrl.monster.MonsterFactory" name="mrl.monster.MonsterFactory getFactory()" map="C"/>
  <method class="mrl.monster.MonsterFactory" name="mrl.monster.Monster getMonsterForLevel(mrl.level.Level)" map="A"/>
  <class name="mrl.monster.MonsterDefinition" map="B"/>
  <field class="mrl.monster.MonsterDefinition" name="ethereal" map="A"/>
  <field class="mrl.monster.MonsterDefinition" name="maxHits" map="B"/>
  <field class="mrl.monster.MonsterDefinition" name="evadeMessage" map="C"/>
  <field class="mrl.monster.MonsterDefinition" name="maxLevel" map="D"/>
  <field class="mrl.monster.MonsterDefinition" name="attackCost" map="E"/>
  <field class="mrl.monster.MonsterDefinition" name="sightRange" map="F"/>
  <field class="mrl.monster.MonsterDefinition" name="evadeChance" map="G"/>
  <field class="mrl.monster.MonsterDefinition" name="ID" map="H"/>
  <field class="mrl.monster.MonsterDefinition" name="canSwim" map="I"/>
  <field class="mrl.monster.MonsterDefinition" name="walkCost" map="J"/>
  <field class="mrl.monster.MonsterDefinition" name="appearance" map="K"/>
  <field class="mrl.monster.MonsterDefinition" name="autorespawnCount" map="L"/>
  <field class="mrl.monster.MonsterDefinition" name="leaping" map="M"/>
  <field class="mrl.monster.MonsterDefinition" name="description" map="N"/>
  <field class="mrl.monster.MonsterDefinition" name="attack" map="O"/>
  <field class="mrl.monster.MonsterDefinition" name="wavOnHit" map="P"/>
  <field class="mrl.monster.MonsterDefinition" name="minLevel" map="Q"/>
  <field class="mrl.monster.MonsterDefinition" name="defaultSelector" map="R"/>
  <method class="mrl.monster.MonsterDefinition" name="void setMaxLevel(int)" map="A"/>
  <method class="mrl.monster.MonsterDefinition" name="boolean isCanSwim()" map="A"/>
  <method class="mrl.monster.MonsterDefinition" name="void setLeaping(int)" map="B"/>
  <method class="mrl.monster.MonsterDefinition" name="int getEvadeChance()" map="B"/>
  <method class="mrl.monster.MonsterDefinition" name="void setAttack(int)" map="C"/>
  <method class="mrl.monster.MonsterDefinition" name="void setCanSwim(boolean)" map="A"/>
  <method class="mrl.monster.MonsterDefinition" name="void setAutorespawnCount(int)" map="D"/>
  <method class="mrl.monster.MonsterDefinition" name="java.lang.String getEvadeMessage()" map="C"/>
  <method class="mrl.monster.MonsterDefinition" name="int getAttack()" map="D"/>
  <method class="mrl.monster.MonsterDefinition" name="java.lang.String getID()" map="E"/>
  <method class="mrl.monster.MonsterDefinition" name="int getMinLevel()" map="F"/>
  <method class="mrl.monster.MonsterDefinition" name="void setEvadeMessage(java.lang.String)" map="A"/>
  <method class="mrl.monster.MonsterDefinition" name="void setWalkCost(int)" map="E"/>
  <method class="mrl.monster.MonsterDefinition" name="void setAttackCost(int)" map="F"/>
  <method class="mrl.monster.MonsterDefinition" name="int getSightRange()" map="G"/>
  <method class="mrl.monster.MonsterDefinition" name="void setAppearance(mrl.ui.Appearance)" map="A"/>
  <method class="mrl.monster.MonsterDefinition" name="void setMinLevel(int)" map="G"/>
  <method class="mrl.monster.MonsterDefinition" name="int getAutorespawnCount()" map="H"/>
  <method class="mrl.monster.MonsterDefinition" name="boolean isEthereal()" map="I"/>
  <method class="mrl.monster.MonsterDefinition" name="void setWavOnHit(java.lang.String)" map="B"/>
  <method class="mrl.monster.MonsterDefinition" name="java.lang.String getWavOnHit()" map="J"/>
  <method class="mrl.monster.MonsterDefinition" name="int getWalkCost()" map="K"/>
  <method class="mrl.monster.MonsterDefinition" name="int getAttackCost()" map="L"/>
  <method class="mrl.monster.MonsterDefinition" name="void setEthereal(boolean)" map="B"/>
  <method class="mrl.monster.MonsterDefinition" name="void setDefaultSelector(mrl.ai.ActionSelector)" map="A"/>
  <method class="mrl.monster.MonsterDefinition" name="void setDescription(java.lang.String)" map="C"/>
  <method class="mrl.monster.MonsterDefinition" name="mrl.ui.Appearance getAppearance()" map="M"/>
  <method class="mrl.monster.MonsterDefinition" name="void setSightRange(int)" map="H"/>
  <method class="mrl.monster.MonsterDefinition" name="void setMaxHits(int)" map="I"/>
  <method class="mrl.monster.MonsterDefinition" name="int getLeaping()" map="N"/>
  <method class="mrl.monster.MonsterDefinition" name="int getMaxLevel()" map="O"/>
  <method class="mrl.monster.MonsterDefinition" name="java.lang.String getDescription()" map="P"/>
  <method class="mrl.monster.MonsterDefinition" name="int getMaxHits()" map="Q"/>
  <method class="mrl.monster.MonsterDefinition" name="void setEvadeChance(int)" map="J"/>
  <method class="mrl.monster.MonsterDefinition" name="mrl.ai.ActionSelector getDefaultSelector()" map="R"/>
  <class name="mrl.monster.Monster" map="C"/>
  <field class="mrl.monster.Monster" name="hits" map="Q"/>
  <field class="mrl.monster.Monster" name="featurePrize" map="R"/>
  <field class="mrl.monster.Monster" name="definition" map="S"/>
  <field class="mrl.monster.Monster" name="wasSeen" map="T"/>
  <field class="mrl.monster.Monster" name="frozenCounter" map="U"/>
  <field class="mrl.monster.Monster" name="visible" map="V"/>
  <field class="mrl.monster.Monster" name="defID" map="W"/>
  <method class="mrl.monster.Monster" name="void updateStatus()" map="I"/>
  <method class="mrl.monster.Monster" name="int getHeight()" map="O"/>
  <method class="mrl.monster.Monster" name="java.lang.String getDescription()" map="H"/>
  <method class="mrl.monster.Monster" name="void damage(int)" map="E"/>
  <method class="mrl.monster.Monster" name="void setFeaturePrize(java.lang.String)" map="B"/>
  <method class="mrl.monster.Monster" name="boolean isVisible()" map="P"/>
  <method class="mrl.monster.Monster" name="boolean canSwim()" map="Q"/>
  <method class="mrl.monster.Monster" name="java.lang.String getFeaturePrize()" map="R"/>
  <method class="mrl.monster.Monster" name="java.lang.String getEvadeMessage()" map="S"/>
  <method class="mrl.monster.Monster" name="boolean isEthereal()" map="T"/>
  <method class="mrl.monster.Monster" name="int getFreezeResistance()" map="U"/>
  <method class="mrl.monster.Monster" name="boolean isFrozen()" map="V"/>
  <method class="mrl.monster.Monster" name="boolean waitsPlayer()" map="W"/>
  <method class="mrl.monster.Monster" name="java.lang.String getWavOnHit()" map="X"/>
  <method class="mrl.monster.Monster" name="mrl.monster.MonsterDefinition getDefinition()" map="Y"/>
  <method class="mrl.monster.Monster" name="java.lang.String getID()" map="Z"/>
  <method class="mrl.monster.Monster" name="void die()" map="D"/>
  <method class="mrl.monster.Monster" name="int getEvadeChance()" map="_"/>
  <method class="mrl.monster.Monster" name="void setPrize()" map="a"/>
  <method class="mrl.monster.Monster" name="int getHits()" map="b"/>
  <method class="mrl.monster.Monster" name="int getLeaping()" map="c"/>
  <method class="mrl.monster.Monster" name="int getAttackCost()" map="d"/>
  <method class="mrl.monster.Monster" name="boolean isDead()" map="e"/>
  <method class="mrl.monster.Monster" name="void damageWithWeapon(int)" map="F"/>
  <method class="mrl.monster.Monster" name="int getAutorespawncount()" map="f"/>
  <method class="mrl.monster.Monster" name="void act()" map="E"/>
  <method class="mrl.monster.Monster" name="mrl.ui.Appearance getAppearance()" map="G"/>
  <method class="mrl.monster.Monster" name="int getWalkCost()" map="g"/>
  <method class="mrl.monster.Monster" name="void setVisible(boolean)" map="A"/>
  <method class="mrl.monster.Monster" name="void setWasSeen(boolean)" map="B"/>
  <method class="mrl.monster.Monster" name="int starePlayer()" map="h"/>
  <method class="mrl.monster.Monster" name="int getAttack()" map="i"/>
  <method class="mrl.monster.Monster" name="boolean playerInRow()" map="j"/>
  <method class="mrl.monster.Monster" name="boolean wasSeen()" map="k"/>
  <method class="mrl.monster.Monster" name="void freeze(int)" map="G"/>
  <method class="mrl.monster.Monster" name="boolean isInWater()" map="l"/>
  <method class="mrl.monster.Monster" name="java.lang.Object clone()" map="clone"/>
  <class name="mrl.monster.VMonster" map="D"/>
  <field class="mrl.monster.VMonster" name="monsters" map="A"/>
  <method class="mrl.monster.VMonster" name="java.util.Vector getVector()" map="A"/>
  <method class="mrl.monster.VMonster" name="void remove(java.lang.Object)" map="A"/>
  <method class="mrl.monster.VMonster" name="mrl.monster.Monster getMonsterAt(sz.util.Position)" map="A"/>
  <method class="mrl.monster.VMonster" name="java.util.Enumeration elements()" map="B"/>
  <method class="mrl.monster.VMonster" name="void addMonster(mrl.monster.Monster)" map="A"/>
  <method class="mrl.monster.VMonster" name="void removeAll(java.util.Collection)" map="A"/>
  <method class="mrl.monster.VMonster" name="mrl.monster.Monster elementAt(int)" map="A"/>
  <method class="mrl.monster.VMonster" name="int size()" map="C"/>
  <method class="mrl.monster.VMonster" name="void removeAll()" map="D"/>
  <package name="mrl.player" map="J"/>
  <class name="mrl.player.MonsterDeath" map="A"/>
  <field class="mrl.player.MonsterDeath" name="monsterDescription" map="A"/>
  <field class="mrl.player.MonsterDeath" name="times" map="B"/>
  <method class="mrl.player.MonsterDeath" name="java.lang.String getMonsterDescription()" map="A"/>
  <method class="mrl.player.MonsterDeath" name="void increaseDeaths()" map="B"/>
  <method class="mrl.player.MonsterDeath" name="void setTimes(int)" map="A"/>
  <method class="mrl.player.MonsterDeath" name="void setMonsterDescription(java.lang.String)" map="A"/>
  <method class="mrl.player.MonsterDeath" name="int getTimes()" map="C"/>
  <class name="mrl.player.GameSessionInfo" map="B"/>
  <field class="mrl.player.GameSessionInfo" name="turns" map="A"/>
  <field class="mrl.player.GameSessionInfo" name="STRANGLED_BY_ARMOR" map="B"/>
  <field class="mrl.player.GameSessionInfo" name="QUIT" map="C"/>
  <field class="mrl.player.GameSessionInfo" name="SMASHED" map="D"/>
  <field class="mrl.player.GameSessionInfo" name="DROWNED" map="E"/>
  <field class="mrl.player.GameSessionInfo" name="KILLED" map="F"/>
  <field class="mrl.player.GameSessionInfo" name="deathLevel" map="G"/>
  <field class="mrl.player.GameSessionInfo" name="history" map="H"/>
  <field class="mrl.player.GameSessionInfo" name="ASCENDED" map="I"/>
  <field class="mrl.player.GameSessionInfo" name="deathLevelDescription" map="J"/>
  <field class="mrl.player.GameSessionInfo" name="deathCause" map="K"/>
  <field class="mrl.player.GameSessionInfo" name="player" map="L"/>
  <field class="mrl.player.GameSessionInfo" name="killerMonster" map="M"/>
  <field class="mrl.player.GameSessionInfo" name="deathCount" map="N"/>
  <field class="mrl.player.GameSessionInfo" name="goldCount" map="O"/>
  <field class="mrl.player.GameSessionInfo" name="POISONED_TO_DEATH" map="P"/>
  <field class="mrl.player.GameSessionInfo" name="BURNED_BY_LAVA" map="Q"/>
  <field class="mrl.player.GameSessionInfo" name="ENDLESS_PIT" map="R"/>
  <method class="mrl.player.GameSessionInfo" name="mrl.player.Player getPlayer()" map="A"/>
  <method class="mrl.player.GameSessionInfo" name="void setDeathCause(int)" map="A"/>
  <method class="mrl.player.GameSessionInfo" name="java.util.Vector getHistory()" map="B"/>
  <method class="mrl.player.GameSessionInfo" name="void addGold(int)" map="B"/>
  <method class="mrl.player.GameSessionInfo" name="java.lang.String getDeathLevelDescription()" map="C"/>
  <method class="mrl.player.GameSessionInfo" name="int getTotalDeathCount()" map="D"/>
  <method class="mrl.player.GameSessionInfo" name="void setKillerMonster(mrl.monster.Monster)" map="A"/>
  <method class="mrl.player.GameSessionInfo" name="java.lang.String getShortDeathString()" map="E"/>
  <method class="mrl.player.GameSessionInfo" name="void increaseTurns()" map="F"/>
  <method class="mrl.player.GameSessionInfo" name="long getGoldCount()" map="G"/>
  <method class="mrl.player.GameSessionInfo" name="void addDeath(mrl.monster.MonsterDefinition)" map="A"/>
  <method class="mrl.player.GameSessionInfo" name="void setDeathLevelDescription(java.lang.String)" map="A"/>
  <method class="mrl.player.GameSessionInfo" name="java.util.Hashtable getDeathCount()" map="H"/>
  <method class="mrl.player.GameSessionInfo" name="void addHistoryItem(java.lang.String)" map="B"/>
  <method class="mrl.player.GameSessionInfo" name="java.lang.String getDeathString()" map="I"/>
  <method class="mrl.player.GameSessionInfo" name="int getTurns()" map="J"/>
  <method class="mrl.player.GameSessionInfo" name="void setPlayer(mrl.player.Player)" map="A"/>
  <class name="mrl.player.PlayerEventListener" map="C"/>
  <method class="mrl.player.PlayerEventListener" name="void informEvent(int, java.lang.Object)" map="A"/>
  <method class="mrl.player.PlayerEventListener" name="void informEvent(int)" map="E"/>
  <class name="mrl.player.Player" map="D"/>
  <field class="mrl.player.Player" name="skills" map="X"/>
  <field class="mrl.player.Player" name="beamChargeCount" map="Y"/>
  <field class="mrl.player.Player" name="isSpaceJumpActivated" map="Z"/>
  <field class="mrl.player.Player" name="hasSpiderBall" map="_"/>
  <field class="mrl.player.Player" name="WON" map="a"/>
  <field class="mrl.player.Player" name="isIceBeamActivated" map="b"/>
  <field class="mrl.player.Player" name="powerBombs" map="c"/>
  <field class="mrl.player.Player" name="hasChargeBeam" map="d"/>
  <field class="mrl.player.Player" name="isScrewAttackActivated" map="e"/>
  <field class="mrl.player.Player" name="hasThermoVisor" map="f"/>
  <field class="mrl.player.Player" name="availableSkills" map="g"/>
  <field class="mrl.player.Player" name="isBallMorphed" map="h"/>
  <field class="mrl.player.Player" name="fov" map="i"/>
  <field class="mrl.player.Player" name="hasVariaSuit" map="j"/>
  <field class="mrl.player.Player" name="hasWaveBeam" map="k"/>
  <field class="mrl.player.Player" name="DAMAGE_WALKED_ON_LAVA" map="l"/>
  <field class="mrl.player.Player" name="hasSpaceJump" map="m"/>
  <field class="mrl.player.Player" name="jumpingPower" map="n"/>
  <field class="mrl.player.Player" name="height" map="o"/>
  <field class="mrl.player.Player" name="isEnergyBombActivated" map="p"/>
  <field class="mrl.player.Player" name="baseSightRange" map="q"/>
  <field class="mrl.player.Player" name="EVT_BACK_LEVEL" map="r"/>
  <field class="mrl.player.Player" name="hasPlasmaBeam" map="s"/>
  <field class="mrl.player.Player" name="energyTanks" map="t"/>
  <field class="mrl.player.Player" name="hasScrewAttack" map="u"/>
  <field class="mrl.player.Player" name="sex" map="v"/>
  <field class="mrl.player.Player" name="isHighJumpBoosterActivated" map="w"/>
  <field class="mrl.player.Player" name="reserveEnergy" map="x"/>
  <field class="mrl.player.Player" name="hasXRayVisor" map="y"/>
  <field class="mrl.player.Player" name="DAMAGE_COLD" map="z"/>
  <field class="mrl.player.Player" name="isSpiderBallActivated" map="&#x00a2;"/>
  <field class="mrl.player.Player" name="hasGravitySuit" map="&#x00a3;"/>
  <field class="mrl.player.Player" name="weaponG" map="&#x00a4;"/>
  <field class="mrl.player.Player" name="superMissiles" map="&#x00a5;"/>
  <field class="mrl.player.Player" name="isThermoVisorActivated" map="&#x00aa;"/>
  <field class="mrl.player.Player" name="weaponC" map="&#x00b5;"/>
  <field class="mrl.player.Player" name="weaponB" map="&#x00ba;"/>
  <field class="mrl.player.Player" name="weaponA" map="&#x00c0;"/>
  <field class="mrl.player.Player" name="isXRayVisorActivated" map="&#x00c1;"/>
  <field class="mrl.player.Player" name="jumpCost" map="&#x00c2;"/>
  <field class="mrl.player.Player" name="isPlasmaBeamActivated" map="&#x00c3;"/>
  <field class="mrl.player.Player" name="isWaveBeamActivated" map="&#x00c4;"/>
  <field class="mrl.player.Player" name="isJumping" map="&#x00c5;"/>
  <field class="mrl.player.Player" name="gameSessionInfo" map="&#x00c6;"/>
  <field class="mrl.player.Player" name="EVT_CHAT" map="&#x00c7;"/>
  <field class="mrl.player.Player" name="name" map="&#x00c8;"/>
  <field class="mrl.player.Player" name="jumpingCounter" map="&#x00c9;"/>
  <field class="mrl.player.Player" name="doNotRecordScore" map="&#x00ca;"/>
  <field class="mrl.player.Player" name="EVT_GOTO_LEVEL" map="&#x00cb;"/>
  <field class="mrl.player.Player" name="DAMAGE_USING_ITEM" map="&#x00cc;"/>
  <field class="mrl.player.Player" name="EVT_NEXT_LEVEL" map="&#x00cd;"/>
  <field class="mrl.player.Player" name="reserveEnergyMax" map="&#x00ce;"/>
  <field class="mrl.player.Player" name="isChargeBeamActivated" map="&#x00cf;"/>
  <field class="mrl.player.Player" name="isSpringBallActivated" map="&#x00d0;"/>
  <field class="mrl.player.Player" name="DAMAGE_POISON" map="&#x00d1;"/>
  <field class="mrl.player.Player" name="hasEnergyBomb" map="&#x00d2;"/>
  <field class="mrl.player.Player" name="attackCost" map="&#x00d3;"/>
  <field class="mrl.player.Player" name="missiles" map="&#x00d4;"/>
  <field class="mrl.player.Player" name="hasHighJumpBooster" map="&#x00d5;"/>
  <field class="mrl.player.Player" name="tankEnergy" map="&#x00d6;"/>
  <field class="mrl.player.Player" name="hasIceBeam" map="&#x00d8;"/>
  <field class="mrl.player.Player" name="evadeChance" map="&#x00d9;"/>
  <field class="mrl.player.Player" name="missilesCapacity" map="&#x00da;"/>
  <field class="mrl.player.Player" name="superMissilesCapacity" map="&#x00db;"/>
  <field class="mrl.player.Player" name="playerEventListener" map="&#x00dc;"/>
  <field class="mrl.player.Player" name="hasSpringBall" map="&#x00dd;"/>
  <field class="mrl.player.Player" name="walkCost" map="&#x00de;"/>
  <field class="mrl.player.Player" name="isGravitySuitActivated" map="&#x00df;"/>
  <field class="mrl.player.Player" name="isMorphBallActivated" map="&#x00e0;"/>
  <field class="mrl.player.Player" name="isVariaSuitActivated" map="&#x00e1;"/>
  <field class="mrl.player.Player" name="DEATH" map="&#x00e2;"/>
  <field class="mrl.player.Player" name="powerBombsCapacity" map="&#x00e3;"/>
  <field class="mrl.player.Player" name="energyTanksCapacity" map="&#x00e4;"/>
  <field class="mrl.player.Player" name="hasMorphBall" map="&#x00e5;"/>
  <method class="mrl.player.Player" name="void informPlayerEvent(int, java.lang.Object)" map="A"/>
  <method class="mrl.player.Player" name="void setBallMorphed(boolean)" map="C"/>
  <method class="mrl.player.Player" name="boolean sees(sz.util.Position)" map="B"/>
  <method class="mrl.player.Player" name="void setGravitySuitActivated(boolean)" map="D"/>
  <method class="mrl.player.Player" name="java.util.Vector getAvailableSkills()" map="m"/>
  <method class="mrl.player.Player" name="void setPowerBombs(int)" map="H"/>
  <method class="mrl.player.Player" name="void recoverEnergy()" map="n"/>
  <method class="mrl.player.Player" name="boolean isHasSpiderBall()" map="o"/>
  <method class="mrl.player.Player" name="void setHasPlasmaBeam(boolean)" map="E"/>
  <method class="mrl.player.Player" name="int getTankEnergy()" map="p"/>
  <method class="mrl.player.Player" name="java.lang.String getBeamType()" map="q"/>
  <method class="mrl.player.Player" name="int getPowerBombsCapacity()" map="r"/>
  <method class="mrl.player.Player" name="void ballMorph(boolean)" map="F"/>
  <method class="mrl.player.Player" name="boolean isThermoVisorActivated()" map="s"/>
  <method class="mrl.player.Player" name="void checkWeapons()" map="t"/>
  <method class="mrl.player.Player" name="void setSpringBallActivated(boolean)" map="G"/>
  <method class="mrl.player.Player" name="void updateStatus()" map="I"/>
  <method class="mrl.player.Player" name="void damage(int)" map="I"/>
  <method class="mrl.player.Player" name="void setXRayVisorActivated(boolean)" map="H"/>
  <method class="mrl.player.Player" name="mrl.player.PlayerEventListener getPlayerEventListener()" map="u"/>
  <method class="mrl.player.Player" name="int getAbsoluteEnergy()" map="v"/>
  <method class="mrl.player.Player" name="void see()" map="w"/>
  <method class="mrl.player.Player" name="int getHeight()" map="x"/>
  <method class="mrl.player.Player" name="int getEnergyTanks()" map="y"/>
  <method class="mrl.player.Player" name="java.lang.String getArmorDescription()" map="z"/>
  <method class="mrl.player.Player" name="sz.util.Position getNearestMonsterPosition()" map="&#x00a2;"/>
  <method class="mrl.player.Player" name="java.lang.String getName()" map="&#x00a3;"/>
  <method class="mrl.player.Player" name="boolean isChargeBeamActivated()" map="&#x00a4;"/>
  <method class="mrl.player.Player" name="void darken()" map="&#x00a5;"/>
  <method class="mrl.player.Player" name="int getMissilesCapacity()" map="&#x00aa;"/>
  <method class="mrl.player.Player" name="void setHighJumpBoosterActivated(boolean)" map="I"/>
  <method class="mrl.player.Player" name="boolean isWaveBeamActivated()" map="&#x00b5;"/>
  <method class="mrl.player.Player" name="mrl.ui.Appearance getAppearance()" map="G"/>
  <method class="mrl.player.Player" name="void setSpiderBallActivated(boolean)" map="J"/>
  <method class="mrl.player.Player" name="int getEnergyTanksCapacity()" map="&#x00ba;"/>
  <method class="mrl.player.Player" name="void damage(mrl.monster.Monster, int)" map="A"/>
  <method class="mrl.player.Player" name="void setSpaceJumpActivated(boolean)" map="K"/>
  <method class="mrl.player.Player" name="boolean isHasPlasmaBeam()" map="&#x00c0;"/>
  <method class="mrl.player.Player" name="mrl.player.GameSessionInfo getGameSessionInfo()" map="&#x00c1;"/>
  <method class="mrl.player.Player" name="void setEnergyTanksCapacity(int)" map="J"/>
  <method class="mrl.player.Player" name="void informPlayerEvent(int)" map="K"/>
  <method class="mrl.player.Player" name="int getBeamAttack()" map="&#x00c2;"/>
  <method class="mrl.player.Player" name="void setAttackCost(int)" map="L"/>
  <method class="mrl.player.Player" name="void reduceEnergy(int)" map="M"/>
  <method class="mrl.player.Player" name="int getMaxEnergy()" map="&#x00c3;"/>
  <method class="mrl.player.Player" name="boolean isMorphBallActivated()" map="&#x00c4;"/>
  <method class="mrl.player.Player" name="void land()" map="&#x00c5;"/>
  <method class="mrl.player.Player" name="void addMissiles(int)" map="N"/>
  <method class="mrl.player.Player" name="void landOn(sz.util.Position)" map="C"/>
  <method class="mrl.player.Player" name="boolean isPlasmaBeamActivated()" map="&#x00c6;"/>
  <method class="mrl.player.Player" name="boolean isGravitySuitActivated()" map="&#x00c7;"/>
  <method class="mrl.player.Player" name="void addHistoricEvent(java.lang.String)" map="C"/>
  <method class="mrl.player.Player" name="int getSex()" map="&#x00c8;"/>
  <method class="mrl.player.Player" name="void jump()" map="&#x00c9;"/>
  <method class="mrl.player.Player" name="java.lang.String getBeamDescription()" map="&#x00ca;"/>
  <method class="mrl.player.Player" name="boolean isBallMorphed()" map="&#x00cb;"/>
  <method class="mrl.player.Player" name="boolean isSpringBallActivated()" map="&#x00cc;"/>
  <method class="mrl.player.Player" name="boolean isHasMorphBall()" map="&#x00cd;"/>
  <method class="mrl.player.Player" name="int getJumpingPower()" map="&#x00ce;"/>
  <method class="mrl.player.Player" name="boolean isSpiderBallActivated()" map="&#x00cf;"/>
  <method class="mrl.player.Player" name="int getSuperMissilesCapacity()" map="&#x00d0;"/>
  <method class="mrl.player.Player" name="void setHasScrewAttack(boolean)" map="L"/>
  <method class="mrl.player.Player" name="boolean isSpaceJumpActivated()" map="&#x00d1;"/>
  <method class="mrl.player.Player" name="boolean sees(mrl.monster.Monster)" map="A"/>
  <method class="mrl.player.Player" name="void setReserveEnergyMax(int)" map="O"/>
  <method class="mrl.player.Player" name="void setEnergyTanks(int)" map="P"/>
  <method class="mrl.player.Player" name="void setMissilesCapacity(int)" map="Q"/>
  <method class="mrl.player.Player" name="void setName(java.lang.String)" map="D"/>
  <method class="mrl.player.Player" name="void useReserveEnergy()" map="&#x00d2;"/>
  <method class="mrl.player.Player" name="void setSex(int)" map="R"/>
  <method class="mrl.player.Player" name="void setHasWaveBeam(boolean)" map="M"/>
  <method class="mrl.player.Player" name="boolean isChargedBeam()" map="&#x00d3;"/>
  <method class="mrl.player.Player" name="void setHasSpiderBall(boolean)" map="N"/>
  <method class="mrl.player.Player" name="int getPowerBombs()" map="&#x00d4;"/>
  <method class="mrl.player.Player" name="void setIceBeamActivated(boolean)" map="O"/>
  <method class="mrl.player.Player" name="void initBeamCharge()" map="&#x00d5;"/>
  <method class="mrl.player.Player" name="boolean isHasSpaceJump()" map="&#x00d6;"/>
  <method class="mrl.player.Player" name="int getMissiles()" map="&#x00d8;"/>
  <method class="mrl.player.Player" name="boolean isHasXRayVisor()" map="&#x00d9;"/>
  <method class="mrl.player.Player" name="boolean isHasHighJumpBooster()" map="&#x00da;"/>
  <method class="mrl.player.Player" name="void setHasThermoVisor(boolean)" map="P"/>
  <method class="mrl.player.Player" name="int getJumpCost()" map="&#x00db;"/>
  <method class="mrl.player.Player" name="boolean isScrewAttackActivated()" map="&#x00dc;"/>
  <method class="mrl.player.Player" name="int getReserveEnergyMax()" map="&#x00dd;"/>
  <method class="mrl.player.Player" name="void addPowerBombs(int)" map="S"/>
  <method class="mrl.player.Player" name="int getScrewAttackDamage()" map="&#x00de;"/>
  <method class="mrl.player.Player" name="void selfDamage(int, int)" map="A"/>
  <method class="mrl.player.Player" name="boolean isVariaSuitActivated()" map="&#x00df;"/>
  <method class="mrl.player.Player" name="void setPlasmaBeamActivated(boolean)" map="Q"/>
  <method class="mrl.player.Player" name="void setDoNotRecordScore(boolean)" map="R"/>
  <method class="mrl.player.Player" name="void setHasEnergyBomb(boolean)" map="S"/>
  <method class="mrl.player.Player" name="void setHasGravitySuit(boolean)" map="T"/>
  <method class="mrl.player.Player" name="boolean isHighJumpBoosterActivated()" map="&#x00e0;"/>
  <method class="mrl.player.Player" name="void setJumpCost(int)" map="T"/>
  <method class="mrl.player.Player" name="void dischargeBeam()" map="&#x00e1;"/>
  <method class="mrl.player.Player" name="void recoverWeapons()" map="&#x00e2;"/>
  <method class="mrl.player.Player" name="boolean isHasThermoVisor()" map="&#x00e3;"/>
  <method class="mrl.player.Player" name="void setSuperMissiles(int)" map="U"/>
  <method class="mrl.player.Player" name="void setGameSessionInfo(mrl.player.GameSessionInfo)" map="A"/>
  <method class="mrl.player.Player" name="boolean isJumping()" map="&#x00e4;"/>
  <method class="mrl.player.Player" name="boolean isEnergyBombActivated()" map="&#x00e5;"/>
  <method class="mrl.player.Player" name="boolean isHasGravitySuit()" map="&#x00e6;"/>
  <method class="mrl.player.Player" name="void setMissiles(int)" map="V"/>
  <method class="mrl.player.Player" name="void setFOV(sz.fov.FOV)" map="A"/>
  <method class="mrl.player.Player" name="int getWalkCost()" map="&#x00e7;"/>
  <method class="mrl.player.Player" name="void setPlayerEventListener(mrl.player.PlayerEventListener)" map="A"/>
  <method class="mrl.player.Player" name="void setHasSpringBall(boolean)" map="U"/>
  <method class="mrl.player.Player" name="void setHasSpaceJump(boolean)" map="V"/>
  <method class="mrl.player.Player" name="int getAttackCost()" map="&#x00e8;"/>
  <method class="mrl.player.Player" name="boolean isHasWaveBeam()" map="&#x00e9;"/>
  <method class="mrl.player.Player" name="void setSuperMissilesCapacity(int)" map="W"/>
  <method class="mrl.player.Player" name="int getSightRange()" map="&#x00ea;"/>
  <method class="mrl.player.Player" name="void setTankEnergy(int)" map="X"/>
  <method class="mrl.player.Player" name="int getSuperMissiles()" map="&#x00eb;"/>
  <method class="mrl.player.Player" name="void setWaveBeamActivated(boolean)" map="W"/>
  <method class="mrl.player.Player" name="boolean isScewAttacking()" map="&#x00ec;"/>
  <method class="mrl.player.Player" name="int getSuperMissileAttack()" map="&#x00ed;"/>
  <method class="mrl.player.Player" name="boolean isHasIceBeam()" map="&#x00ee;"/>
  <method class="mrl.player.Player" name="void setReserveEnergy(int)" map="Y"/>
  <method class="mrl.player.Player" name="void setPowerBombsCapacity(int)" map="Z"/>
  <method class="mrl.player.Player" name="void addEnergy(int)" map="_"/>
  <method class="mrl.player.Player" name="void setHasVariaSuit(boolean)" map="X"/>
  <method class="mrl.player.Player" name="boolean isChargingBeam()" map="&#x00ef;"/>
  <method class="mrl.player.Player" name="boolean isHasVariaSuit()" map="&#x00f0;"/>
  <method class="mrl.player.Player" name="void setHasChargeBeam(boolean)" map="Y"/>
  <method class="mrl.player.Player" name="void setHasHighJumpBooster(boolean)" map="Z"/>
  <method class="mrl.player.Player" name="boolean isDoNotRecordScore()" map="&#x00f1;"/>
  <method class="mrl.player.Player" name="boolean isHasChargeBeam()" map="&#x00f2;"/>
  <method class="mrl.player.Player" name="boolean isHasScrewAttack()" map="&#x00f3;"/>
  <method class="mrl.player.Player" name="boolean isHasSpringBall()" map="&#x00f4;"/>
  <method class="mrl.player.Player" name="boolean isXRayVisorActivated()" map="&#x00f5;"/>
  <method class="mrl.player.Player" name="void setThermoVisorActivated(boolean)" map="_"/>
  <method class="mrl.player.Player" name="void setHasIceBeam(boolean)" map="a"/>
  <method class="mrl.player.Player" name="void setScrewAttackActivated(boolean)" map="b"/>
  <method class="mrl.player.Player" name="int getRating()" map="&#x00f6;"/>
  <method class="mrl.player.Player" name="void setHasXRayVisor(boolean)" map="c"/>
  <method class="mrl.player.Player" name="void setHasMorphBall(boolean)" map="d"/>
  <method class="mrl.player.Player" name="int getReserveEnergy()" map="&#x00f8;"/>
  <method class="mrl.player.Player" name="void setChargeBeamActivated(boolean)" map="e"/>
  <method class="mrl.player.Player" name="boolean isIceBeamActivated()" map="&#x00f9;"/>
  <method class="mrl.player.Player" name="void checkDeath()" map="&#x00fa;"/>
  <method class="mrl.player.Player" name="int getMissileAttack()" map="&#x00fb;"/>
  <method class="mrl.player.Player" name="void setVariaSuitActivated(boolean)" map="f"/>
  <method class="mrl.player.Player" name="void addSuperMissiles(int)" map="a"/>
  <method class="mrl.player.Player" name="boolean isHasEnergyBomb()" map="&#x00fc;"/>
  <class name="mrl.player.HiScore" map="E"/>
  <field class="mrl.player.HiScore" name="date" map="A"/>
  <field class="mrl.player.HiScore" name="name" map="B"/>
  <field class="mrl.player.HiScore" name="turns" map="C"/>
  <field class="mrl.player.HiScore" name="deathString" map="D"/>
  <field class="mrl.player.HiScore" name="deathLevel" map="E"/>
  <field class="mrl.player.HiScore" name="score" map="F"/>
  <method class="mrl.player.HiScore" name="java.lang.String getDeathLevel()" map="A"/>
  <method class="mrl.player.HiScore" name="void setTurns(java.lang.String)" map="A"/>
  <method class="mrl.player.HiScore" name="void setDate(java.lang.String)" map="B"/>
  <method class="mrl.player.HiScore" name="void setName(java.lang.String)" map="C"/>
  <method class="mrl.player.HiScore" name="java.lang.String getDate()" map="B"/>
  <method class="mrl.player.HiScore" name="int getScore()" map="C"/>
  <method class="mrl.player.HiScore" name="java.lang.String getName()" map="D"/>
  <method class="mrl.player.HiScore" name="java.lang.String getTurns()" map="E"/>
  <method class="mrl.player.HiScore" name="void setDeathString(java.lang.String)" map="D"/>
  <method class="mrl.player.HiScore" name="void setDeathLevel(java.lang.String)" map="E"/>
  <method class="mrl.player.HiScore" name="java.lang.String getDeathString()" map="F"/>
  <method class="mrl.player.HiScore" name="void setScore(int)" map="A"/>
  <class name="mrl.player.Skill" map="F"/>
  <field class="mrl.player.Skill" name="symbolic" map="A"/>
  <field class="mrl.player.Skill" name="action" map="B"/>
  <field class="mrl.player.Skill" name="actionDescription" map="C"/>
  <field class="mrl.player.Skill" name="heartCost" map="D"/>
  <method class="mrl.player.Skill" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="mrl.player.Skill" name="boolean isSymbolic()" map="D"/>
  <method class="mrl.player.Skill" name="char getMenuChar()" map="B"/>
  <method class="mrl.player.Skill" name="int getMenuColor()" map="C"/>
  <method class="mrl.player.Skill" name="mrl.action.Action getAction()" map="E"/>
  <package name="mrl.game" map="K"/>
  <class name="mrl.game.SFXManager" map="A"/>
  <field class="mrl.game.SFXManager" name="currentThread" map="A"/>
  <field class="mrl.game.SFXManager" name="enabled" map="B"/>
  <method class="mrl.game.SFXManager" name="void setEnabled(boolean)" map="A"/>
  <method class="mrl.game.SFXManager" name="void play(java.lang.String)" map="A"/>
  <class name="mrl.game.CRLException" map="B"/>
  <field class="mrl.game.CRLException" name="message" map="A"/>
  <method class="mrl.game.CRLException" name="java.lang.String toString()" map="toString"/>
  <class name="mrl.game.GameFiles" map="C"/>
  <method class="mrl.game.GameFiles" name="void saveGame(mrl.game.Game, mrl.player.Player)" map="A"/>
  <method class="mrl.game.GameFiles" name="mrl.player.HiScore[] loadScores()" map="A"/>
  <method class="mrl.game.GameFiles" name="void saveHiScore(mrl.player.Player)" map="A"/>
  <method class="mrl.game.GameFiles" name="void permadeath(mrl.player.Player)" map="B"/>
  <method class="mrl.game.GameFiles" name="void saveMemorialFile(mrl.player.Player)" map="C"/>
  <class name="mrl.game.PlayerGenerator" map="D"/>
  <field class="mrl.game.PlayerGenerator" name="thus" map="A"/>
  <field class="mrl.game.PlayerGenerator" name="SPECIAL_PLAYERS" map="B"/>
  <method class="mrl.game.PlayerGenerator" name="mrl.player.Player createSpecialPlayer(java.lang.String)" map="A"/>
  <method class="mrl.game.PlayerGenerator" name="mrl.player.Player generatePlayer()" map="A"/>
  <method class="mrl.game.PlayerGenerator" name="mrl.player.Player getPlayer(java.lang.String)" map="B"/>
  <class name="mrl.game.STMusicManager" map="E"/>
  <field class="mrl.game.STMusicManager" name="musics" map="A"/>
  <field class="mrl.game.STMusicManager" name="currentMidiThread" map="B"/>
  <field class="mrl.game.STMusicManager" name="thus" map="C"/>
  <field class="mrl.game.STMusicManager" name="enabled" map="D"/>
  <field class="mrl.game.STMusicManager" name="playing" map="E"/>
  <field class="mrl.game.STMusicManager" name="currentMP3Thread" map="F"/>
  <method class="mrl.game.STMusicManager" name="void setEnabled(boolean)" map="A"/>
  <method class="mrl.game.STMusicManager" name="void playKey(java.lang.String)" map="A"/>
  <method class="mrl.game.STMusicManager" name="void playForLevel(int, java.lang.String)" map="A"/>
  <method class="mrl.game.STMusicManager" name="void addMusic(java.lang.String, java.lang.String)" map="A"/>
  <method class="mrl.game.STMusicManager" name="void play(java.lang.String)" map="B"/>
  <method class="mrl.game.STMusicManager" name="void die()" map="A"/>
  <method class="mrl.game.STMusicManager" name="void stopMusic()" map="B"/>
  <method class="mrl.game.STMusicManager" name="void initManager()" map="C"/>
  <class name="mrl.game.Game" map="F"/>
  <field class="mrl.game.Game" name="LANE_DESCRIPTIONS" map="&#x00a5;"/>
  <field class="mrl.game.Game" name="MUSIC_KEYS" map="&#x00aa;"/>
  <field class="mrl.game.Game" name="currentLevel" map="&#x00b5;"/>
  <field class="mrl.game.Game" name="endGame" map="&#x00ba;"/>
  <field class="mrl.game.Game" name="timeSwitch" map="&#x00c0;"/>
  <field class="mrl.game.Game" name="reports" map="&#x00c1;"/>
  <field class="mrl.game.Game" name="hashLevelMap" map="&#x00c2;"/>
  <field class="mrl.game.Game" name="levelPath" map="&#x00c3;"/>
  <field class="mrl.game.Game" name="isDay" map="&#x00c4;"/>
  <field class="mrl.game.Game" name="storedLevels" map="&#x00c5;"/>
  <field class="mrl.game.Game" name="ui" map="&#x00c6;"/>
  <field class="mrl.game.Game" name="player" map="&#x00c7;"/>
  <field class="mrl.game.Game" name="turns" map="&#x00c8;"/>
  <field class="mrl.game.Game" name="dispatcher" map="&#x00c9;"/>
  <method class="mrl.game.Game" name="void informEvent(int)" map="E"/>
  <method class="mrl.game.Game" name="void setPlayer(mrl.player.Player)" map="B"/>
  <method class="mrl.game.Game" name="java.lang.String getVersion()" map="T"/>
  <method class="mrl.game.Game" name="void commandSelected(int)" map="A"/>
  <method class="mrl.game.Game" name="void showMetaData(java.lang.String, java.lang.String, int)" map="A"/>
  <method class="mrl.game.Game" name="java.util.Vector getReports()" map="U"/>
  <method class="mrl.game.Game" name="void addReport(java.lang.String)" map="E"/>
  <method class="mrl.game.Game" name="void finishGame()" map="V"/>
  <method class="mrl.game.Game" name="void resume()" map="W"/>
  <method class="mrl.game.Game" name="void setInterfaces(mrl.ui.UserInterface)" map="B"/>
  <method class="mrl.game.Game" name="void crash(java.lang.String, java.lang.Throwable)" map="A"/>
  <method class="mrl.game.Game" name="void newGame()" map="X"/>
  <method class="mrl.game.Game" name="void wonGame()" map="Y"/>
  <method class="mrl.game.Game" name="void exitGame()" map="Z"/>
  <method class="mrl.game.Game" name="void setLevel(mrl.level.Level)" map="A"/>
  <method class="mrl.game.Game" name="void generateLevelMap()" map="_"/>
  <method class="mrl.game.Game" name="void informEvent(int, java.lang.Object)" map="A"/>
  <method class="mrl.game.Game" name="java.lang.String[] getDwellers(int, int)" map="C"/>
  <method class="mrl.game.Game" name="void loadLevel(java.lang.String)" map="F"/>
  <method class="mrl.game.Game" name="mrl.player.Player getPlayer()" map="a"/>
  <method class="mrl.game.Game" name="java.lang.String getDescription(int)" map="F"/>
  <method class="mrl.game.Game" name="void main(java.lang.String[])" map="A"/>
  <method class="mrl.game.Game" name="void loadBackLevel()" map="b"/>
  <method class="mrl.game.Game" name="void run()" map="c"/>
  <method class="mrl.game.Game" name="void resumeScreen()" map="d"/>
  <method class="mrl.game.Game" name="void prologue()" map="e"/>
  <method class="mrl.game.Game" name="void loadNextLevel()" map="f"/>
  <method class="mrl.game.Game" name="void loadLevel(java.lang.String, int)" map="A"/>
  <method class="mrl.game.Game" name="java.lang.String getMusicKey(int)" map="G"/>
  <package name="mrl.feature" map="L"/>
  <package name="mrl.feature.selector" map="A"/>
  <class name="mrl.feature.selector.SuperBombSelector" map="A"/>
  <field class="mrl.feature.selector.SuperBombSelector" name="activated" map="L"/>
  <field class="mrl.feature.selector.SuperBombSelector" name="turnsToBlast" map="M"/>
  <method class="mrl.feature.selector.SuperBombSelector" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.feature.selector.SuperBombSelector" name="java.lang.String getID()" map="B"/>
  <method class="mrl.feature.selector.SuperBombSelector" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="mrl.feature.selector.BombSelector" map="B"/>
  <field class="mrl.feature.selector.BombSelector" name="activated" map="N"/>
  <field class="mrl.feature.selector.BombSelector" name="turnsToBlast" map="O"/>
  <method class="mrl.feature.selector.BombSelector" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.feature.selector.BombSelector" name="java.lang.String getID()" map="B"/>
  <method class="mrl.feature.selector.BombSelector" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <package name="mrl.feature.action" map="B"/>
  <class name="mrl.feature.action.BombBlast" map="A"/>
  <method class="mrl.feature.action.BombBlast" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.feature.action.BombBlast" name="void execute()" map="F"/>
  <method class="mrl.feature.action.BombBlast" name="java.lang.String getID()" map="D"/>
  <method class="mrl.feature.action.BombBlast" name="int getCost()" map="M"/>
  <class name="mrl.feature.action.SuperBombBlast" map="B"/>
  <method class="mrl.feature.action.SuperBombBlast" name="java.lang.String getSFX()" map="A"/>
  <method class="mrl.feature.action.SuperBombBlast" name="void execute()" map="F"/>
  <method class="mrl.feature.action.SuperBombBlast" name="java.lang.String getID()" map="D"/>
  <method class="mrl.feature.action.SuperBombBlast" name="int getCost()" map="M"/>
  <class name="mrl.feature.SmartFeatureFactory" map="A"/>
  <field class="mrl.feature.SmartFeatureFactory" name="definitions" map="A"/>
  <field class="mrl.feature.SmartFeatureFactory" name="singleton" map="B"/>
  <method class="mrl.feature.SmartFeatureFactory" name="void addDefinition(mrl.feature.SmartFeature)" map="A"/>
  <method class="mrl.feature.SmartFeatureFactory" name="void init(mrl.feature.SmartFeature[])" map="A"/>
  <method class="mrl.feature.SmartFeatureFactory" name="mrl.feature.SmartFeatureFactory getFactory()" map="A"/>
  <method class="mrl.feature.SmartFeatureFactory" name="mrl.feature.SmartFeature buildFeature(java.lang.String)" map="A"/>
  <class name="mrl.feature.Feature" map="B"/>
  <field class="mrl.feature.Feature" name="variaSuitPrize" map="A"/>
  <field class="mrl.feature.Feature" name="scorePrize" map="B"/>
  <field class="mrl.feature.Feature" name="gravitySuitPrize" map="C"/>
  <field class="mrl.feature.Feature" name="healPrize" map="D"/>
  <field class="mrl.feature.Feature" name="energyTankPrize" map="E"/>
  <field class="mrl.feature.Feature" name="supermissilePrize" map="F"/>
  <field class="mrl.feature.Feature" name="prize" map="G"/>
  <field class="mrl.feature.Feature" name="bombBlastPrize" map="H"/>
  <field class="mrl.feature.Feature" name="chargeBeamPrize" map="I"/>
  <field class="mrl.feature.Feature" name="iceBeamPrize" map="J"/>
  <field class="mrl.feature.Feature" name="keyCost" map="K"/>
  <field class="mrl.feature.Feature" name="description" map="L"/>
  <field class="mrl.feature.Feature" name="relevant" map="M"/>
  <field class="mrl.feature.Feature" name="destroyable" map="N"/>
  <field class="mrl.feature.Feature" name="plasmaBeamPrize" map="O"/>
  <field class="mrl.feature.Feature" name="missileCapacityPrize" map="P"/>
  <field class="mrl.feature.Feature" name="appearance" map="Q"/>
  <field class="mrl.feature.Feature" name="thermoVisorPrize" map="R"/>
  <field class="mrl.feature.Feature" name="powerBombCapacityPrize" map="S"/>
  <field class="mrl.feature.Feature" name="ID" map="T"/>
  <field class="mrl.feature.Feature" name="spaceJumpPrize" map="U"/>
  <field class="mrl.feature.Feature" name="energyPrize" map="V"/>
  <field class="mrl.feature.Feature" name="springBallPrize" map="W"/>
  <field class="mrl.feature.Feature" name="waveBeamPrize" map="X"/>
  <field class="mrl.feature.Feature" name="trigger" map="Y"/>
  <field class="mrl.feature.Feature" name="heightMod" map="Z"/>
  <field class="mrl.feature.Feature" name="isSolid" map="_"/>
  <field class="mrl.feature.Feature" name="reserveTankPrize" map="a"/>
  <field class="mrl.feature.Feature" name="xRayVisorPrize" map="b"/>
  <field class="mrl.feature.Feature" name="appearanceID" map="c"/>
  <field class="mrl.feature.Feature" name="position" map="d"/>
  <field class="mrl.feature.Feature" name="morphBallPrize" map="e"/>
  <field class="mrl.feature.Feature" name="hiJumpPrize" map="f"/>
  <field class="mrl.feature.Feature" name="effect" map="g"/>
  <field class="mrl.feature.Feature" name="spiderBallPrize" map="h"/>
  <field class="mrl.feature.Feature" name="powerBombPrize" map="i"/>
  <field class="mrl.feature.Feature" name="missilePrize" map="j"/>
  <field class="mrl.feature.Feature" name="superMissileCapacityPrize" map="k"/>
  <field class="mrl.feature.Feature" name="screwAttackPrize" map="l"/>
  <method class="mrl.feature.Feature" name="void setRelevant(boolean)" map="A"/>
  <method class="mrl.feature.Feature" name="void setKeyCost(int)" map="A"/>
  <method class="mrl.feature.Feature" name="void setTrigger(java.lang.String)" map="A"/>
  <method class="mrl.feature.Feature" name="java.lang.String getTrigger()" map="A"/>
  <method class="mrl.feature.Feature" name="boolean isXRayVisorPrize()" map="B"/>
  <method class="mrl.feature.Feature" name="void setPowerBombPrize(int)" map="B"/>
  <method class="mrl.feature.Feature" name="void setSupermissilePrize(int)" map="C"/>
  <method class="mrl.feature.Feature" name="boolean isGravitySuitPrize()" map="C"/>
  <method class="mrl.feature.Feature" name="int getMissilePrize()" map="D"/>
  <method class="mrl.feature.Feature" name="sz.util.Position getPosition()" map="E"/>
  <method class="mrl.feature.Feature" name="void setGravitySuitPrize(boolean)" map="B"/>
  <method class="mrl.feature.Feature" name="int getScorePrize()" map="F"/>
  <method class="mrl.feature.Feature" name="int getPowerBombCapacityPrize()" map="G"/>
  <method class="mrl.feature.Feature" name="void setSpiderBallPrize(boolean)" map="C"/>
  <method class="mrl.feature.Feature" name="void setScorePrize(int)" map="D"/>
  <method class="mrl.feature.Feature" name="void setReserveTankPrize(int)" map="E"/>
  <method class="mrl.feature.Feature" name="int getReserveTankPrize()" map="H"/>
  <method class="mrl.feature.Feature" name="boolean isVariaSuitPrize()" map="I"/>
  <method class="mrl.feature.Feature" name="boolean isBombBlastPrize()" map="J"/>
  <method class="mrl.feature.Feature" name="java.lang.Object clone()" map="clone"/>
  <method class="mrl.feature.Feature" name="boolean isSpaceJumpPrize()" map="K"/>
  <method class="mrl.feature.Feature" name="int getSuperMissileCapacityPrize()" map="L"/>
  <method class="mrl.feature.Feature" name="boolean isVisible()" map="M"/>
  <method class="mrl.feature.Feature" name="boolean isThermoVisorPrize()" map="N"/>
  <method class="mrl.feature.Feature" name="void setMissilePrize(int)" map="F"/>
  <method class="mrl.feature.Feature" name="void setScrewAttackPrize(boolean)" map="D"/>
  <method class="mrl.feature.Feature" name="int getHealPrize()" map="O"/>
  <method class="mrl.feature.Feature" name="void setPlasmaBeamPrize(boolean)" map="E"/>
  <method class="mrl.feature.Feature" name="void setPrize(mrl.feature.Feature)" map="A"/>
  <method class="mrl.feature.Feature" name="int getMissileCapacityPrize()" map="P"/>
  <method class="mrl.feature.Feature" name="void setXRayVisorPrize(boolean)" map="F"/>
  <method class="mrl.feature.Feature" name="int getKeyCost()" map="Q"/>
  <method class="mrl.feature.Feature" name="boolean isScrewAttackPrize()" map="R"/>
  <method class="mrl.feature.Feature" name="boolean isRelevant()" map="S"/>
  <method class="mrl.feature.Feature" name="void setMissileCapacityPrize(int)" map="G"/>
  <method class="mrl.feature.Feature" name="void setEnergyPrize(int)" map="H"/>
  <method class="mrl.feature.Feature" name="int getSupermissilePrize()" map="T"/>
  <method class="mrl.feature.Feature" name="void setChargeBeamPrize(boolean)" map="G"/>
  <method class="mrl.feature.Feature" name="mrl.ui.Appearance getAppearance()" map="U"/>
  <method class="mrl.feature.Feature" name="void setSpringBallPrize(boolean)" map="H"/>
  <method class="mrl.feature.Feature" name="void setHiJumpPrize(boolean)" map="I"/>
  <method class="mrl.feature.Feature" name="java.lang.String getDescription()" map="V"/>
  <method class="mrl.feature.Feature" name="boolean isChargeBeamPrize()" map="W"/>
  <method class="mrl.feature.Feature" name="boolean isHiJumpPrize()" map="X"/>
  <method class="mrl.feature.Feature" name="void setIceBeamPrize(boolean)" map="J"/>
  <method class="mrl.feature.Feature" name="int getPowerBombPrize()" map="Y"/>
  <method class="mrl.feature.Feature" name="boolean isSolid()" map="Z"/>
  <method class="mrl.feature.Feature" name="boolean isIceBeamPrize()" map="_"/>
  <method class="mrl.feature.Feature" name="void setEffect(java.lang.String)" map="B"/>
  <method class="mrl.feature.Feature" name="void setWaveBeamPrize(boolean)" map="K"/>
  <method class="mrl.feature.Feature" name="void setSuperMissileCapacityPrize(int)" map="I"/>
  <method class="mrl.feature.Feature" name="void setThermoVisorPrize(boolean)" map="L"/>
  <method class="mrl.feature.Feature" name="java.lang.String getID()" map="a"/>
  <method class="mrl.feature.Feature" name="int getEnergyPrize()" map="b"/>
  <method class="mrl.feature.Feature" name="void setDestroyable(boolean)" map="M"/>
  <method class="mrl.feature.Feature" name="void setSolid(boolean)" map="N"/>
  <method class="mrl.feature.Feature" name="boolean isWaveBeamPrize()" map="c"/>
  <method class="mrl.feature.Feature" name="int getEnergyTankPrize()" map="d"/>
  <method class="mrl.feature.Feature" name="boolean isSpringBallPrize()" map="e"/>
  <method class="mrl.feature.Feature" name="boolean isSpiderBallPrize()" map="f"/>
  <method class="mrl.feature.Feature" name="boolean isPlasmaBeamPrize()" map="g"/>
  <method class="mrl.feature.Feature" name="boolean isMorphBallPrize()" map="h"/>
  <method class="mrl.feature.Feature" name="void setMorphBallPrize(boolean)" map="O"/>
  <method class="mrl.feature.Feature" name="void setPowerBombCapacityPrize(int)" map="J"/>
  <method class="mrl.feature.Feature" name="int getHeightMod()" map="i"/>
  <method class="mrl.feature.Feature" name="void setPosition(int, int, int)" map="A"/>
  <method class="mrl.feature.Feature" name="void setEnergyTankPrize(int)" map="K"/>
  <method class="mrl.feature.Feature" name="void setHealPrize(int)" map="L"/>
  <method class="mrl.feature.Feature" name="void setBombBlastPrize(boolean)" map="P"/>
  <method class="mrl.feature.Feature" name="void setSpaceJumpPrize(boolean)" map="Q"/>
  <method class="mrl.feature.Feature" name="void setVariaSuitPrize(boolean)" map="R"/>
  <method class="mrl.feature.Feature" name="java.lang.String getEffect()" map="j"/>
  <method class="mrl.feature.Feature" name="boolean isDestroyable()" map="k"/>
  <method class="mrl.feature.Feature" name="void setHeightMod(int)" map="M"/>
  <class name="mrl.feature.CountDown" map="C"/>
  <field class="mrl.feature.CountDown" name="turnsToDie" map="P"/>
  <method class="mrl.feature.CountDown" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="mrl.feature.CountDown" name="void setTurns(int)" map="E"/>
  <method class="mrl.feature.CountDown" name="java.lang.String getID()" map="B"/>
  <method class="mrl.feature.CountDown" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="mrl.feature.VFeatures" map="D"/>
  <field class="mrl.feature.VFeatures" name="features" map="A"/>
  <field class="mrl.feature.VFeatures" name="mLocs" map="B"/>
  <method class="mrl.feature.VFeatures" name="void addFeature(mrl.feature.Feature)" map="A"/>
  <method class="mrl.feature.VFeatures" name="void removeFeature(mrl.feature.Feature)" map="B"/>
  <method class="mrl.feature.VFeatures" name="mrl.feature.Feature getFeatureAt(sz.util.Position)" map="A"/>
  <class name="mrl.feature.SmartFeature" map="E"/>
  <field class="mrl.feature.SmartFeature" name="ID" map="&#x00e6;"/>
  <field class="mrl.feature.SmartFeature" name="appearance" map="&#x00e7;"/>
  <field class="mrl.feature.SmartFeature" name="destroyable" map="&#x00e8;"/>
  <field class="mrl.feature.SmartFeature" name="damageOnStep" map="&#x00e9;"/>
  <field class="mrl.feature.SmartFeature" name="effectOnStep" map="&#x00ea;"/>
  <field class="mrl.feature.SmartFeature" name="description" map="&#x00eb;"/>
  <field class="mrl.feature.SmartFeature" name="appearanceID" map="&#x00ec;"/>
  <method class="mrl.feature.SmartFeature" name="void setDescription(java.lang.String)" map="E"/>
  <method class="mrl.feature.SmartFeature" name="java.lang.String getEffectOnStep()" map="&#x00fd;"/>
  <method class="mrl.feature.SmartFeature" name="void setDamageOnStep(int)" map="b"/>
  <method class="mrl.feature.SmartFeature" name="java.lang.String getID()" map="&#x00fe;"/>
  <method class="mrl.feature.SmartFeature" name="void setID(java.lang.String)" map="F"/>
  <method class="mrl.feature.SmartFeature" name="void setDestroyable(boolean)" map="g"/>
  <method class="mrl.feature.SmartFeature" name="int getDamageOnStep()" map="&#x00ff;"/>
  <method class="mrl.feature.SmartFeature" name="mrl.ui.Appearance getAppearance()" map="G"/>
  <method class="mrl.feature.SmartFeature" name="boolean isVisible()" map="&#x0100;"/>
  <method class="mrl.feature.SmartFeature" name="java.lang.String getDescription()" map="H"/>
  <method class="mrl.feature.SmartFeature" name="void setEffectOnStep(java.lang.String)" map="G"/>
  <method class="mrl.feature.SmartFeature" name="void setAppearance(mrl.ui.Appearance)" map="A"/>
  <method class="mrl.feature.SmartFeature" name="java.lang.Object clone()" map="clone"/>
  <method class="mrl.feature.SmartFeature" name="boolean isDestroyable()" map="&#x0101;"/>
  <class name="mrl.feature.FeatureFactory" map="F"/>
  <field class="mrl.feature.FeatureFactory" name="definitions" map="A"/>
  <field class="mrl.feature.FeatureFactory" name="singleton" map="B"/>
  <method class="mrl.feature.FeatureFactory" name="mrl.feature.Feature buildFeature(java.lang.String)" map="A"/>
  <method class="mrl.feature.FeatureFactory" name="mrl.feature.FeatureFactory getFactory()" map="A"/>
  <method class="mrl.feature.FeatureFactory" name="void addDefinition(mrl.feature.Feature)" map="A"/>
  <method class="mrl.feature.FeatureFactory" name="java.lang.String getDescriptionForID(java.lang.String)" map="B"/>
  <method class="mrl.feature.FeatureFactory" name="void init(mrl.feature.Feature[])" map="A"/>
  <class name="mrl.SaveGameFilenameFilter" map="A"/>
  <method class="mrl.SaveGameFilenameFilter" name="boolean accept(java.io.File, java.lang.String)" map="accept"/>
  <field class="mrl.Main" name="currentGame" map="A"/>
  <field class="mrl.Main" name="createNew" map="B"/>
  <field class="mrl.Main" name="SWING_GFX" map="C"/>
  <field class="mrl.Main" name="JCURSES_CONSOLE" map="D"/>
  <field class="mrl.Main" name="ui" map="E"/>
  <field class="mrl.Main" name="mode" map="F"/>
  <method class="mrl.Main" name="mrl.ai.ActionSelector[] getSelectorDefinitions()" map="A"/>
  <method class="mrl.Main" name="void initializeUI(java.lang.Object)" map="A"/>
  <method class="mrl.Main" name="void initializeCAppearances()" map="B"/>
  <method class="mrl.Main" name="void initializeMonsters()" map="C"/>
  <method class="mrl.Main" name="void initializeActions()" map="D"/>
  <method class="mrl.Main" name="void initializeSmartFeatures()" map="E"/>
  <method class="mrl.Main" name="void readConfiguration()" map="F"/>
  <method class="mrl.Main" name="void initializeCells()" map="G"/>
  <method class="mrl.Main" name="void loadGame()" map="H"/>
  <method class="mrl.Main" name="void crash(java.lang.String, java.lang.Throwable)" map="A"/>
  <method class="mrl.Main" name="void initializeSelectors()" map="I"/>
  <method class="mrl.Main" name="void initializeFeatures()" map="J"/>
  <method class="mrl.Main" name="void newGame()" map="K"/>
  <method class="mrl.Main" name="void title()" map="L"/>
  <method class="mrl.Main" name="void init()" map="M"/>
  <package name="sz" map="A"/>
  <package name="sz.mp3" map="A"/>
  <class name="sz.mp3.JLayerMP3Player" map="A"/>
  <field class="sz.mp3.JLayerMP3Player" name="INS_LOAD" map="A"/>
  <field class="sz.mp3.JLayerMP3Player" name="currentInstruction" map="B"/>
  <field class="sz.mp3.JLayerMP3Player" name="INS_DIE" map="C"/>
  <field class="sz.mp3.JLayerMP3Player" name="INS_STOP" map="D"/>
  <field class="sz.mp3.JLayerMP3Player" name="currentMP3File" map="E"/>
  <method class="sz.mp3.JLayerMP3Player" name="void setInstruction(int)" map="A"/>
  <method class="sz.mp3.JLayerMP3Player" name="void run()" map="run"/>
  <method class="sz.mp3.JLayerMP3Player" name="void setMP3(java.lang.String)" map="A"/>
  <package name="sz.util" map="B"/>
  <class name="sz.util.PriorityEnqueable" map="A"/>
  <method class="sz.util.PriorityEnqueable" name="void reduceCost(int)" map="A"/>
  <method class="sz.util.PriorityEnqueable" name="int getCost()" map="A"/>
  <class name="sz.util.Position" map="B"/>
  <field class="sz.util.Position" name="x" map="A"/>
  <field class="sz.util.Position" name="z" map="B"/>
  <field class="sz.util.Position" name="y" map="C"/>
  <method class="sz.util.Position" name="int flatDistance(sz.util.Position, sz.util.Position)" map="A"/>
  <method class="sz.util.Position" name="sz.util.Position mul(sz.util.Position, sz.util.Position)" map="B"/>
  <method class="sz.util.Position" name="int flatDistance(int, int, int, int)" map="A"/>
  <method class="sz.util.Position" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="sz.util.Position" name="void add(sz.util.Position)" map="A"/>
  <method class="sz.util.Position" name="int z()" map="A"/>
  <method class="sz.util.Position" name="sz.util.Position mul(sz.util.Position, int)" map="A"/>
  <method class="sz.util.Position" name="sz.util.Position subs(sz.util.Position, sz.util.Position)" map="C"/>
  <method class="sz.util.Position" name="int distance(sz.util.Position, sz.util.Position)" map="D"/>
  <method class="sz.util.Position" name="sz.util.Position add(sz.util.Position, sz.util.Position)" map="E"/>
  <method class="sz.util.Position" name="int y()" map="B"/>
  <method class="sz.util.Position" name="java.lang.String toString()" map="toString"/>
  <method class="sz.util.Position" name="void mul(sz.util.Position)" map="B"/>
  <method class="sz.util.Position" name="int x()" map="C"/>
  <class name="sz.util.ImageUtils" map="C"/>
  <field class="sz.util.ImageUtils" name="tempImage" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.Image crearImagen(java.lang.String, java.awt.Component)" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.image.BufferedImage crearImagen(java.awt.image.BufferedImage, int, int, int, int)" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.Image crearImagen(java.lang.String)" map="A"/>
  <method class="sz.util.ImageUtils" name="java.awt.image.BufferedImage createImage(java.lang.String)" map="B"/>
  <method class="sz.util.ImageUtils" name="java.awt.image.BufferedImage crearImagen(java.lang.String, int, int, int, int)" map="A"/>
  <class name="sz.util.Line" map="D"/>
  <field class="sz.util.Line" name="xvar" map="A"/>
  <field class="sz.util.Line" name="z" map="B"/>
  <field class="sz.util.Line" name="ystep" map="C"/>
  <field class="sz.util.Line" name="steep" map="D"/>
  <field class="sz.util.Line" name="error" map="E"/>
  <field class="sz.util.Line" name="y" map="F"/>
  <field class="sz.util.Line" name="x" map="G"/>
  <field class="sz.util.Line" name="deltay" map="H"/>
  <field class="sz.util.Line" name="deltax" map="I"/>
  <method class="sz.util.Line" name="void main(java.lang.String[])" map="A"/>
  <method class="sz.util.Line" name="sz.util.Position next()" map="A"/>
  <method class="sz.util.Line" name="void setZ(int)" map="A"/>
  <class name="sz.util.ScriptUtil" map="E"/>
  <method class="sz.util.ScriptUtil" name="java.lang.String replace(java.lang.String[], java.lang.String[], java.lang.String)" map="A"/>
  <class name="sz.util.FileUtil" map="F"/>
  <method class="sz.util.FileUtil" name="boolean fileExists(java.lang.String)" map="A"/>
  <method class="sz.util.FileUtil" name="java.io.BufferedWriter getWriter(java.lang.String)" map="B"/>
  <method class="sz.util.FileUtil" name="java.io.BufferedReader getReader(java.lang.String)" map="C"/>
  <method class="sz.util.FileUtil" name="int filasEnArchivo(java.lang.String)" map="D"/>
  <method class="sz.util.FileUtil" name="void deleteFile(java.lang.String)" map="E"/>
  <method class="sz.util.FileUtil" name="void copyFile(java.io.File, java.io.File)" map="A"/>
  <class name="sz.util.Dimension" map="G"/>
  <field class="sz.util.Dimension" name="x" map="A"/>
  <field class="sz.util.Dimension" name="y" map="B"/>
  <method class="sz.util.Dimension" name="int getArea()" map="A"/>
  <class name="sz.util.SZPriorityQueue" map="H"/>
  <field class="sz.util.SZPriorityQueue" name="list" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="java.util.Vector getVector()" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void enqueue(sz.util.PriorityEnqueable)" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void forceToFront(java.lang.Object, java.lang.Object)" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void remove(java.lang.Object)" map="A"/>
  <method class="sz.util.SZPriorityQueue" name="void forceToFront(java.lang.Object)" map="B"/>
  <method class="sz.util.SZPriorityQueue" name="boolean contains(java.lang.Object)" map="C"/>
  <method class="sz.util.SZPriorityQueue" name="void printStatus()" map="B"/>
  <method class="sz.util.SZPriorityQueue" name="void removeAll()" map="C"/>
  <method class="sz.util.SZPriorityQueue" name="boolean isEmpty()" map="D"/>
  <method class="sz.util.SZPriorityQueue" name="java.lang.Object unqueue()" map="E"/>
  <class name="sz.util.Counter" map="I"/>
  <field class="sz.util.Counter" name="value" map="A"/>
  <method class="sz.util.Counter" name="boolean isOver()" map="A"/>
  <method class="sz.util.Counter" name="void reduce()" map="B"/>
  <class name="sz.util.Util" map="J"/>
  <field class="sz.util.Util" name="rand" map="A"/>
  <method class="sz.util.Util" name="java.lang.Object randomElementOf(java.util.Vector)" map="A"/>
  <method class="sz.util.Util" name="int rand(int, int)" map="A"/>
  <method class="sz.util.Util" name="int sign(int)" map="A"/>
  <method class="sz.util.Util" name="java.lang.Object randomElementOf(java.lang.Object[])" map="A"/>
  <method class="sz.util.Util" name="java.util.Vector page(java.util.Vector, int, int)" map="A"/>
  <method class="sz.util.Util" name="boolean chance(int)" map="B"/>
  <method class="sz.util.Util" name="int greater(int, int)" map="B"/>
  <method class="sz.util.Util" name="int abs(int)" map="C"/>
  <method class="sz.util.Util" name="java.lang.String randomElementOf(java.lang.String[])" map="A"/>
  <class name="sz.util.Debug" map="K"/>
  <field class="sz.util.Debug" name="gossip" map="A"/>
  <field class="sz.util.Debug" name="debug" map="B"/>
  <field class="sz.util.Debug" name="lastTimer" map="C"/>
  <field class="sz.util.Debug" name="timing" map="D"/>
  <field class="sz.util.Debug" name="firstTimer" map="E"/>
  <field class="sz.util.Debug" name="methodLevel" map="F"/>
  <method class="sz.util.Debug" name="void say(java.lang.Object)" map="A"/>
  <method class="sz.util.Debug" name="void exitMethod()" map="A"/>
  <method class="sz.util.Debug" name="void say(java.lang.String, int)" map="A"/>
  <method class="sz.util.Debug" name="java.lang.String spaces(int)" map="A"/>
  <method class="sz.util.Debug" name="void enterStaticMethod(java.lang.String, java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void exitMethod(int)" map="B"/>
  <method class="sz.util.Debug" name="void doAssert(boolean, java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void byebye(java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void stopTimer(java.lang.String)" map="B"/>
  <method class="sz.util.Debug" name="void enterMethod(java.lang.Object, java.lang.String)" map="A"/>
  <method class="sz.util.Debug" name="void enterMethod(java.lang.Object, java.lang.String, java.lang.Object)" map="A"/>
  <method class="sz.util.Debug" name="void say(java.lang.String)" map="C"/>
  <method class="sz.util.Debug" name="void exitExceptionally(java.lang.Throwable)" map="A"/>
  <method class="sz.util.Debug" name="void startTimer()" map="B"/>
  <method class="sz.util.Debug" name="void exitMethod(java.lang.Object)" map="B"/>
  <class name="sz.util.SZQueue" map="L"/>
  <field class="sz.util.SZQueue" name="list" map="A"/>
  <method class="sz.util.SZQueue" name="java.util.Vector getVector()" map="A"/>
  <method class="sz.util.SZQueue" name="void enqueue(sz.util.PriorityEnqueable)" map="A"/>
  <method class="sz.util.SZQueue" name="void forceToFront(java.lang.Object, java.lang.Object)" map="A"/>
  <method class="sz.util.SZQueue" name="void remove(java.lang.Object)" map="A"/>
  <method class="sz.util.SZQueue" name="void forceToFront(java.lang.Object)" map="B"/>
  <method class="sz.util.SZQueue" name="boolean contains(java.lang.Object)" map="C"/>
  <method class="sz.util.SZQueue" name="void removeAll()" map="B"/>
  <method class="sz.util.SZQueue" name="boolean isEmpty()" map="C"/>
  <method class="sz.util.SZQueue" name="java.lang.Object unqueue()" map="D"/>
  <package name="sz.ca" map="C"/>
  <class name="sz.ca.CARandomInitializer" map="A"/>
  <field class="sz.ca.CARandomInitializer" name="border" map="A"/>
  <field class="sz.ca.CARandomInitializer" name="proportions" map="B"/>
  <method class="sz.ca.CARandomInitializer" name="void init(sz.ca.Matrix)" map="A"/>
  <class name="sz.ca.Matrix" map="B"/>
  <field class="sz.ca.Matrix" name="futureValues" map="A"/>
  <field class="sz.ca.Matrix" name="values" map="B"/>
  <method class="sz.ca.Matrix" name="void advance()" map="A"/>
  <method class="sz.ca.Matrix" name="int[][] getArrays()" map="B"/>
  <method class="sz.ca.Matrix" name="void setPresent(int, int, int)" map="A"/>
  <method class="sz.ca.Matrix" name="void clean()" map="C"/>
  <method class="sz.ca.Matrix" name="int get(int, int)" map="A"/>
  <method class="sz.ca.Matrix" name="int getSurroundingCount(int, int, int)" map="B"/>
  <method class="sz.ca.Matrix" name="int getWidth()" map="D"/>
  <method class="sz.ca.Matrix" name="int getSurroundingCountNoWrap(int, int, int)" map="C"/>
  <method class="sz.ca.Matrix" name="void setFuture(int, int, int)" map="D"/>
  <method class="sz.ca.Matrix" name="int getHeight()" map="E"/>
  <class name="sz.ca.SZCA" map="C"/>
  <field class="sz.ca.SZCA" name="aMatrix" map="A"/>
  <field class="sz.ca.SZCA" name="wrap" map="B"/>
  <field class="sz.ca.SZCA" name="generation" map="C"/>
  <field class="sz.ca.SZCA" name="aRules" map="D"/>
  <method class="sz.ca.SZCA" name="void runCA(sz.ca.Matrix, sz.ca.CARule[], int, boolean)" map="A"/>
  <method class="sz.ca.SZCA" name="void step()" map="A"/>
  <class name="sz.ca.CARule" map="D"/>
  <field class="sz.ca.CARule" name="HAS" map="A"/>
  <field class="sz.ca.CARule" name="condType" map="B"/>
  <field class="sz.ca.CARule" name="LESS_THAN" map="C"/>
  <field class="sz.ca.CARule" name="baseCell" map="D"/>
  <field class="sz.ca.CARule" name="destinationCell" map="E"/>
  <field class="sz.ca.CARule" name="MORE_THAN" map="F"/>
  <field class="sz.ca.CARule" name="cellParam" map="G"/>
  <field class="sz.ca.CARule" name="cellQuant" map="H"/>
  <method class="sz.ca.CARule" name="void apply(int, int, sz.ca.Matrix, boolean)" map="A"/>
  <method class="sz.ca.CARule" name="java.lang.String toString()" map="toString"/>
  <method class="sz.ca.CARule" name="void validateType(int, int)" map="A"/>
  <package name="sz.fov" map="D"/>
  <class name="sz.fov.FOV" map="A"/>
  <field class="sz.fov.FOV" name="startY" map="A"/>
  <field class="sz.fov.FOV" name="startX" map="B"/>
  <field class="sz.fov.FOV" name="maxRadiusX" map="C"/>
  <field class="sz.fov.FOV" name="circle" map="D"/>
  <method class="sz.fov.FOV" name="void scanSE2S(sz.fov.FOVMap, int, int, int, int, double, double)" map="A"/>
  <method class="sz.fov.FOV" name="boolean scanCell(sz.fov.FOVMap, int, int)" map="A"/>
  <method class="sz.fov.FOV" name="void scanNE2N(sz.fov.FOVMap, int, int, int, int, double, double)" map="B"/>
  <method class="sz.fov.FOV" name="void applyCell(sz.fov.FOVMap, int, int)" map="B"/>
  <method class="sz.fov.FOV" name="void scanNE2E(sz.fov.FOVMap, int, int, int, int, double, double)" map="C"/>
  <method class="sz.fov.FOV" name="void scanSW2W(sz.fov.FOVMap, int, int, int, int, double, double)" map="D"/>
  <method class="sz.fov.FOV" name="void start(sz.fov.FOVMap, int, int, int)" map="A"/>
  <method class="sz.fov.FOV" name="void startCircle(sz.fov.FOVMap, int, int, int)" map="B"/>
  <method class="sz.fov.FOV" name="double invSlope(double, double, double, double)" map="A"/>
  <method class="sz.fov.FOV" name="void scanNW2W(sz.fov.FOVMap, int, int, int, int, double, double)" map="E"/>
  <method class="sz.fov.FOV" name="void scanSW2S(sz.fov.FOVMap, int, int, int, int, double, double)" map="F"/>
  <method class="sz.fov.FOV" name="void scanNW2N(sz.fov.FOVMap, int, int, int, int, double, double)" map="G"/>
  <method class="sz.fov.FOV" name="void scanSE2E(sz.fov.FOVMap, int, int, int, int, double, double)" map="H"/>
  <method class="sz.fov.FOV" name="double slope(double, double, double, double)" map="B"/>
  <class name="sz.fov.FOVMap" map="B"/>
  <method class="sz.fov.FOVMap" name="boolean blockLOS(int, int)" map="A"/>
  <method class="sz.fov.FOVMap" name="void setSeen(int, int)" map="B"/>
  <package name="sz.csi" map="E"/>
  <package name="sz.csi.wswing" map="A"/>
  <class name="sz.csi.wswing.SwingConsolePanel" map="A"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="fontDown" map="A"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="fontWidth" map="B"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="fontSize" map="C"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="updateBuffer" map="D"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="xpos" map="E"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="charBuffer" map="F"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="backGround" map="G"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="ypos" map="H"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="graphicsBuff" map="I"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="autoUpdate" map="J"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="height" map="K"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="flash" map="L"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="xdim" map="M"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="width" map="N"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="colorBuffer" map="O"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="imageBuff" map="P"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="ydim" map="Q"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="f" map="R"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="flashColor" map="S"/>
  <field class="sz.csi.wswing.SwingConsolePanel" name="foreGround" map="T"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void flash(java.awt.Color)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void setAutoUpdate(boolean)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void refresh()" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void plot(char, int, int, java.awt.Color)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void init(java.awt.Font, int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void cls()" map="B"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="char peekChar(int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void plot(char, int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsolePanel" name="void setFont(java.awt.Font)" map="setFont"/>
  <class name="sz.csi.wswing.WSwingConsoleInterface" map="B"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="consoleFont" map="q"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="colorsBuffer" map="r"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="targetPanel" map="s"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="targetFrame" map="t"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="xpos" map="u"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="aStrokeInformer" map="v"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="ypos" map="w"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="BROWN_COLOR" map="x"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="colors" map="y"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKRED_COLOR" map="z"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="autorefresh" map="&#x00a2;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKMAGENTA_COLOR" map="&#x00a3;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="chars" map="&#x00a4;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="xdim" map="&#x00a5;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKGREEN_COLOR" map="&#x00aa;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="caretPosition" map="&#x00b5;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="ydim" map="&#x00ba;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="DARKBLUE_COLOR" map="&#x00c0;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="TEAL_COLOR" map="&#x00c1;"/>
  <field class="sz.csi.wswing.WSwingConsoleInterface" name="charsBuffer" map="&#x00c2;"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void safeprint(int, int, char, int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="boolean isInsideBounds(int, int)" map="E"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void cls()" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentShown(java.awt.event.ComponentEvent)" map="componentShown"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void setAutoRefresh(boolean)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.lang.String loadFont()" map="G"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void refresh()" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void restore()" map="C"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="boolean isInsideBounds(sz.util.Position)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void refresh(java.lang.Thread)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.lang.String input(int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void flash(int)" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="int peekColor(int, int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void waitKey(int)" map="C"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="sz.csi.CharKey inkey()" map="D"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void locateCaret(int, int)" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void saveBuffer()" map="E"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentMoved(java.awt.event.ComponentEvent)" map="componentMoved"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void print(int, int, char, int)" map="B"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void locate(int, int)" map="F"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.lang.String input()" map="F"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentResized(java.awt.event.ComponentEvent)" map="componentResized"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="int defineFontSize(int, int)" map="G"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void print(int, int, java.lang.String, int)" map="A"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void componentHidden(java.awt.event.ComponentEvent)" map="componentHidden"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="void run()" map="run"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="char peekChar(int, int)" map="C"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="java.awt.Color getColorFromCode(int)" map="F"/>
  <method class="sz.csi.wswing.WSwingConsoleInterface" name="int getColor(java.lang.String)" map="A"/>
  <class name="sz.csi.wswing.StrokeInformer" map="C"/>
  <field class="sz.csi.wswing.StrokeInformer" name="bufferCode" map="A"/>
  <field class="sz.csi.wswing.StrokeInformer" name="keyListener" map="B"/>
  <field class="sz.csi.wswing.StrokeInformer" name="aUI" map="C"/>
  <method class="sz.csi.wswing.StrokeInformer" name="int getInkeyBuffer()" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="sz.csi.wswing.StrokeInformer" name="int charCode(java.awt.event.KeyEvent)" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void informKey(java.lang.Thread)" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void setUI(mrl.ui.UserInterface)" map="A"/>
  <method class="sz.csi.wswing.StrokeInformer" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="sz.csi.wswing.SwingConsoleFrame" map="D"/>
  <field class="sz.csi.wswing.SwingConsoleFrame" name="swingConsolePanel" map="A"/>
  <method class="sz.csi.wswing.SwingConsoleFrame" name="void init(java.awt.Font, int, int)" map="A"/>
  <method class="sz.csi.wswing.SwingConsoleFrame" name="sz.csi.wswing.SwingConsolePanel getSwingConsolePanel()" map="A"/>
  <method class="sz.csi.wswing.SwingConsoleFrame" name="void initComponents()" map="B"/>
  <package name="sz.csi.jcurses" map="B"/>
  <class name="sz.csi.jcurses.JCursesConsoleInterface" map="A"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="GREEN" map="Q"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="colorsBuffer" map="R"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="GRAY" map="S"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_F1" map="T"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="TEAL" map="U"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="BLACK" map="V"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_DOWN" map="W"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="BLUE" map="X"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_RIGHT" map="Y"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="RED" map="Z"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="colors" map="_"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="LIGHT_GRAY" map="a"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="DARK_RED" map="b"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="chars" map="c"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="BROWN" map="d"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_UP" map="e"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="CYAN" map="f"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="caretPosition" map="g"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="MAGENTA" map="h"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="YELLOW" map="i"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_BACKSPACE" map="j"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="DARK_BLUE" map="k"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="WHITE" map="l"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="KEY_LEFT" map="m"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="PURPLE" map="n"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="LEMON" map="o"/>
  <field class="sz.csi.jcurses.JCursesConsoleInterface" name="charsBuffer" map="p"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void safeprint(int, int, char, int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="boolean isInsideBounds(int, int)" map="D"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void cls()" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void setAutoRefresh(boolean)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void refresh()" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="jcurses.system.CharColor getJCurseColor(int)" map="D"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void restore()" map="C"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void refresh(java.lang.Thread)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="boolean isInsideBounds(sz.util.Position)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="java.lang.String input(int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="int ASCtoCharKeyCode(int)" map="E"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="int peekColor(int, int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void flash(int)" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void waitKey(int)" map="C"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="sz.csi.CharKey inkey()" map="D"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void locateCaret(int, int)" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void saveBuffer()" map="E"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void print(int, int, char, int)" map="B"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="java.lang.String input()" map="F"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="void print(int, int, java.lang.String, int)" map="A"/>
  <method class="sz.csi.jcurses.JCursesConsoleInterface" name="char peekChar(int, int)" map="C"/>
  <package name="sz.csi.textcomponents" map="C"/>
  <class name="sz.csi.textcomponents.MenuBox" map="A"/>
  <field class="sz.csi.textcomponents.MenuBox" name="pages" map="S"/>
  <field class="sz.csi.textcomponents.MenuBox" name="items" map="T"/>
  <field class="sz.csi.textcomponents.MenuBox" name="currentPage" map="U"/>
  <field class="sz.csi.textcomponents.MenuBox" name="promptBox" map="V"/>
  <field class="sz.csi.textcomponents.MenuBox" name="title" map="W"/>
  <field class="sz.csi.textcomponents.MenuBox" name="promptSize" map="X"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setPosition(int, int)" map="A"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setPrompt(java.lang.String)" map="E"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setBorder(boolean)" map="A"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setMenuItems(java.util.Vector)" map="C"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void draw()" map="C"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setPromptSize(int)" map="E"/>
  <method class="sz.csi.textcomponents.MenuBox" name="java.lang.Object getSelection()" map="M"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setTitle(java.lang.String)" map="F"/>
  <method class="sz.csi.textcomponents.MenuBox" name="void setWidth(int)" map="D"/>
  <class name="sz.csi.textcomponents.TextComponent" map="B"/>
  <field class="sz.csi.textcomponents.TextComponent" name="foreColor" map="A"/>
  <field class="sz.csi.textcomponents.TextComponent" name="width" map="B"/>
  <field class="sz.csi.textcomponents.TextComponent" name="borderColor" map="C"/>
  <field class="sz.csi.textcomponents.TextComponent" name="border" map="D"/>
  <field class="sz.csi.textcomponents.TextComponent" name="si" map="E"/>
  <field class="sz.csi.textcomponents.TextComponent" name="position" map="F"/>
  <field class="sz.csi.textcomponents.TextComponent" name="inWidth" map="G"/>
  <field class="sz.csi.textcomponents.TextComponent" name="spaces" map="H"/>
  <field class="sz.csi.textcomponents.TextComponent" name="inHeight" map="I"/>
  <field class="sz.csi.textcomponents.TextComponent" name="height" map="J"/>
  <field class="sz.csi.textcomponents.TextComponent" name="inPosition" map="K"/>
  <method class="sz.csi.textcomponents.TextComponent" name="boolean hasBorder()" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setPosition(int, int)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void drawBorder()" map="B"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setBorder(boolean)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void draw()" map="C"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setHeight(int)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setBorderColor(int)" map="B"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void clearBox()" map="D"/>
  <method class="sz.csi.textcomponents.TextComponent" name="int getForeColor()" map="E"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setForeColor(int)" map="C"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setBounds(int, int, int, int)" map="A"/>
  <method class="sz.csi.textcomponents.TextComponent" name="int getWidth()" map="F"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void recalcInnerBounds()" map="G"/>
  <method class="sz.csi.textcomponents.TextComponent" name="int getHeight()" map="H"/>
  <method class="sz.csi.textcomponents.TextComponent" name="void setWidth(int)" map="D"/>
  <class name="sz.csi.textcomponents.ListBox" map="C"/>
  <field class="sz.csi.textcomponents.ListBox" name="itemsLista" map="L"/>
  <method class="sz.csi.textcomponents.ListBox" name="void clear()" map="I"/>
  <method class="sz.csi.textcomponents.ListBox" name="void setElements(java.util.Vector)" map="A"/>
  <method class="sz.csi.textcomponents.ListBox" name="void addElement(sz.csi.textcomponents.ListItem)" map="A"/>
  <method class="sz.csi.textcomponents.ListBox" name="void addElements(java.util.Vector)" map="B"/>
  <method class="sz.csi.textcomponents.ListBox" name="void draw()" map="C"/>
  <class name="sz.csi.textcomponents.MenuItem" map="D"/>
  <method class="sz.csi.textcomponents.MenuItem" name="java.lang.String getMenuDescription()" map="A"/>
  <method class="sz.csi.textcomponents.MenuItem" name="char getMenuChar()" map="B"/>
  <method class="sz.csi.textcomponents.MenuItem" name="int getMenuColor()" map="C"/>
  <class name="sz.csi.textcomponents.TextBox" map="E"/>
  <field class="sz.csi.textcomponents.TextBox" name="lines" map="M"/>
  <field class="sz.csi.textcomponents.TextBox" name="title" map="N"/>
  <method class="sz.csi.textcomponents.TextBox" name="void clear()" map="J"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setBorder(boolean)" map="A"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setHeight(int)" map="A"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setTitle(java.lang.String)" map="A"/>
  <method class="sz.csi.textcomponents.TextBox" name="void setText(java.lang.String)" map="B"/>
  <method class="sz.csi.textcomponents.TextBox" name="void draw()" map="C"/>
  <class name="sz.csi.textcomponents.ListItem" map="F"/>
  <method class="sz.csi.textcomponents.ListItem" name="java.lang.String getRow()" map="A"/>
  <method class="sz.csi.textcomponents.ListItem" name="char getIndex()" map="B"/>
  <method class="sz.csi.textcomponents.ListItem" name="int getIndexColor()" map="C"/>
  <class name="sz.csi.textcomponents.TextInformBox" map="G"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="curLine" map="O"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="lines" map="P"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="cury" map="Q"/>
  <field class="sz.csi.textcomponents.TextInformBox" name="curx" map="R"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void clear()" map="K"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void setHeight(int)" map="A"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void addText(java.lang.String)" map="C"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void morePrompt()" map="L"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void setText(java.lang.String)" map="D"/>
  <method class="sz.csi.textcomponents.TextInformBox" name="void draw()" map="C"/>
  <class name="sz.csi.textcomponents.BasicListItem" map="H"/>
  <field class="sz.csi.textcomponents.BasicListItem" name="index" map="A"/>
  <field class="sz.csi.textcomponents.BasicListItem" name="indexColor" map="B"/>
  <field class="sz.csi.textcomponents.BasicListItem" name="rowData" map="C"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="java.lang.String getRow()" map="A"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="void setIndex(char)" map="A"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="char getIndex()" map="B"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="int getIndexColor()" map="C"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="void setIndexColor(int)" map="A"/>
  <method class="sz.csi.textcomponents.BasicListItem" name="void setRow(java.lang.String)" map="A"/>
  <class name="sz.csi.ConsoleSystemInterface" map="A"/>
  <field class="sz.csi.ConsoleSystemInterface" name="GREEN" map="A"/>
  <field class="sz.csi.ConsoleSystemInterface" name="TEAL" map="B"/>
  <field class="sz.csi.ConsoleSystemInterface" name="LEMON" map="C"/>
  <field class="sz.csi.ConsoleSystemInterface" name="WHITE" map="D"/>
  <field class="sz.csi.ConsoleSystemInterface" name="MAGENTA" map="E"/>
  <field class="sz.csi.ConsoleSystemInterface" name="BROWN" map="F"/>
  <field class="sz.csi.ConsoleSystemInterface" name="LIGHT_GRAY" map="G"/>
  <field class="sz.csi.ConsoleSystemInterface" name="DARK_BLUE" map="H"/>
  <field class="sz.csi.ConsoleSystemInterface" name="BLUE" map="I"/>
  <field class="sz.csi.ConsoleSystemInterface" name="YELLOW" map="J"/>
  <field class="sz.csi.ConsoleSystemInterface" name="PURPLE" map="K"/>
  <field class="sz.csi.ConsoleSystemInterface" name="GRAY" map="L"/>
  <field class="sz.csi.ConsoleSystemInterface" name="DARK_RED" map="M"/>
  <field class="sz.csi.ConsoleSystemInterface" name="RED" map="N"/>
  <field class="sz.csi.ConsoleSystemInterface" name="CYAN" map="O"/>
  <field class="sz.csi.ConsoleSystemInterface" name="BLACK" map="P"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void safeprint(int, int, char, int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void cls()" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void print(int, int, java.lang.String)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void setAutoRefresh(boolean)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void refresh()" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void restore()" map="C"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void refresh(java.lang.Thread)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="boolean isInsideBounds(sz.util.Position)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="java.lang.String input(int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="int peekColor(int, int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void flash(int)" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void waitKey(int)" map="C"/>
  <method class="sz.csi.ConsoleSystemInterface" name="sz.csi.CharKey inkey()" map="D"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void locateCaret(int, int)" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void saveBuffer()" map="E"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void print(int, int, char, int)" map="B"/>
  <method class="sz.csi.ConsoleSystemInterface" name="java.lang.String input()" map="F"/>
  <method class="sz.csi.ConsoleSystemInterface" name="void print(int, int, java.lang.String, int)" map="A"/>
  <method class="sz.csi.ConsoleSystemInterface" name="char peekChar(int, int)" map="C"/>
  <class name="sz.csi.CharKey" map="B"/>
  <field class="sz.csi.CharKey" name="COMILLAS" map="A"/>
  <field class="sz.csi.CharKey" name="ESC" map="B"/>
  <field class="sz.csi.CharKey" name="N9" map="C"/>
  <field class="sz.csi.CharKey" name="N8" map="D"/>
  <field class="sz.csi.CharKey" name="N7" map="E"/>
  <field class="sz.csi.CharKey" name="N6" map="F"/>
  <field class="sz.csi.CharKey" name="N5" map="G"/>
  <field class="sz.csi.CharKey" name="N4" map="H"/>
  <field class="sz.csi.CharKey" name="N3" map="I"/>
  <field class="sz.csi.CharKey" name="APOSTROPHE" map="J"/>
  <field class="sz.csi.CharKey" name="N2" map="K"/>
  <field class="sz.csi.CharKey" name="N1" map="L"/>
  <field class="sz.csi.CharKey" name="LCTRL" map="M"/>
  <field class="sz.csi.CharKey" name="N0" map="N"/>
  <field class="sz.csi.CharKey" name="UNDERLINE" map="O"/>
  <field class="sz.csi.CharKey" name="LALT" map="P"/>
  <field class="sz.csi.CharKey" name="OPENCURLYBRACETS" map="Q"/>
  <field class="sz.csi.CharKey" name="SPACE" map="R"/>
  <field class="sz.csi.CharKey" name="COMMA" map="S"/>
  <field class="sz.csi.CharKey" name="BACKSPACE" map="T"/>
  <field class="sz.csi.CharKey" name="UARROW" map="U"/>
  <field class="sz.csi.CharKey" name="RALT" map="V"/>
  <field class="sz.csi.CharKey" name="EXPONENCIATION" map="W"/>
  <field class="sz.csi.CharKey" name="F9" map="X"/>
  <field class="sz.csi.CharKey" name="code" map="Y"/>
  <field class="sz.csi.CharKey" name="F8" map="Z"/>
  <field class="sz.csi.CharKey" name="ARROBE" map="_"/>
  <field class="sz.csi.CharKey" name="PERCENTAGE" map="a"/>
  <field class="sz.csi.CharKey" name="F7" map="b"/>
  <field class="sz.csi.CharKey" name="F6" map="c"/>
  <field class="sz.csi.CharKey" name="z" map="d"/>
  <field class="sz.csi.CharKey" name="F5" map="e"/>
  <field class="sz.csi.CharKey" name="y" map="f"/>
  <field class="sz.csi.CharKey" name="F4" map="g"/>
  <field class="sz.csi.CharKey" name="x" map="h"/>
  <field class="sz.csi.CharKey" name="F3" map="i"/>
  <field class="sz.csi.CharKey" name="w" map="j"/>
  <field class="sz.csi.CharKey" name="F2" map="k"/>
  <field class="sz.csi.CharKey" name="v" map="l"/>
  <field class="sz.csi.CharKey" name="F1" map="m"/>
  <field class="sz.csi.CharKey" name="u" map="n"/>
  <field class="sz.csi.CharKey" name="t" map="o"/>
  <field class="sz.csi.CharKey" name="s" map="p"/>
  <field class="sz.csi.CharKey" name="r" map="q"/>
  <field class="sz.csi.CharKey" name="CTRL" map="r"/>
  <field class="sz.csi.CharKey" name="q" map="s"/>
  <field class="sz.csi.CharKey" name="p" map="t"/>
  <field class="sz.csi.CharKey" name="o" map="u"/>
  <field class="sz.csi.CharKey" name="n" map="v"/>
  <field class="sz.csi.CharKey" name="m" map="w"/>
  <field class="sz.csi.CharKey" name="l" map="x"/>
  <field class="sz.csi.CharKey" name="LESSTHAN" map="y"/>
  <field class="sz.csi.CharKey" name="k" map="z"/>
  <field class="sz.csi.CharKey" name="MONEY" map="&#x00a2;"/>
  <field class="sz.csi.CharKey" name="j" map="&#x00a3;"/>
  <field class="sz.csi.CharKey" name="i" map="&#x00a4;"/>
  <field class="sz.csi.CharKey" name="h" map="&#x00a5;"/>
  <field class="sz.csi.CharKey" name="SLASH" map="&#x00aa;"/>
  <field class="sz.csi.CharKey" name="g" map="&#x00b5;"/>
  <field class="sz.csi.CharKey" name="f" map="&#x00ba;"/>
  <field class="sz.csi.CharKey" name="TAB" map="&#x00c0;"/>
  <field class="sz.csi.CharKey" name="e" map="&#x00c1;"/>
  <field class="sz.csi.CharKey" name="d" map="&#x00c2;"/>
  <field class="sz.csi.CharKey" name="PLUS" map="&#x00c3;"/>
  <field class="sz.csi.CharKey" name="c" map="&#x00c4;"/>
  <field class="sz.csi.CharKey" name="b" map="&#x00c5;"/>
  <field class="sz.csi.CharKey" name="QUESTION" map="&#x00c6;"/>
  <field class="sz.csi.CharKey" name="a" map="&#x00c7;"/>
  <field class="sz.csi.CharKey" name="OPENSHARPBRACETS" map="&#x00c8;"/>
  <field class="sz.csi.CharKey" name="EXCLAMATION" map="&#x00c9;"/>
  <field class="sz.csi.CharKey" name="OPENPARENTHESIS" map="&#x00ca;"/>
  <field class="sz.csi.CharKey" name="CLOSECURLYBRACETS" map="&#x00cb;"/>
  <field class="sz.csi.CharKey" name="DELETE" map="&#x00cc;"/>
  <field class="sz.csi.CharKey" name="Z" map="&#x00cd;"/>
  <field class="sz.csi.CharKey" name="Y" map="&#x00ce;"/>
  <field class="sz.csi.CharKey" name="BACKSLASH" map="&#x00cf;"/>
  <field class="sz.csi.CharKey" name="NONE" map="&#x00d0;"/>
  <field class="sz.csi.CharKey" name="X" map="&#x00d1;"/>
  <field class="sz.csi.CharKey" name="W" map="&#x00d2;"/>
  <field class="sz.csi.CharKey" name="HOME" map="&#x00d3;"/>
  <field class="sz.csi.CharKey" name="V" map="&#x00d4;"/>
  <field class="sz.csi.CharKey" name="U" map="&#x00d5;"/>
  <field class="sz.csi.CharKey" name="T" map="&#x00d6;"/>
  <field class="sz.csi.CharKey" name="S" map="&#x00d8;"/>
  <field class="sz.csi.CharKey" name="R" map="&#x00d9;"/>
  <field class="sz.csi.CharKey" name="Q" map="&#x00da;"/>
  <field class="sz.csi.CharKey" name="P" map="&#x00db;"/>
  <field class="sz.csi.CharKey" name="O" map="&#x00dc;"/>
  <field class="sz.csi.CharKey" name="F12" map="&#x00dd;"/>
  <field class="sz.csi.CharKey" name="N" map="&#x00de;"/>
  <field class="sz.csi.CharKey" name="CURLYMINUS" map="&#x00df;"/>
  <field class="sz.csi.CharKey" name="MORETHAN" map="&#x00e0;"/>
  <field class="sz.csi.CharKey" name="F11" map="&#x00e1;"/>
  <field class="sz.csi.CharKey" name="ASTERISK" map="&#x00e2;"/>
  <field class="sz.csi.CharKey" name="M" map="&#x00e3;"/>
  <field class="sz.csi.CharKey" name="F10" map="&#x00e4;"/>
  <field class="sz.csi.CharKey" name="L" map="&#x00e5;"/>
  <field class="sz.csi.CharKey" name="DOT" map="&#x00e6;"/>
  <field class="sz.csi.CharKey" name="AMPERSAND" map="&#x00e7;"/>
  <field class="sz.csi.CharKey" name="K" map="&#x00e8;"/>
  <field class="sz.csi.CharKey" name="J" map="&#x00e9;"/>
  <field class="sz.csi.CharKey" name="CLOSEPARENTHESIS" map="&#x00ea;"/>
  <field class="sz.csi.CharKey" name="I" map="&#x00eb;"/>
  <field class="sz.csi.CharKey" name="H" map="&#x00ec;"/>
  <field class="sz.csi.CharKey" name="G" map="&#x00ed;"/>
  <field class="sz.csi.CharKey" name="PAGEDOWN" map="&#x00ee;"/>
  <field class="sz.csi.CharKey" name="F" map="&#x00ef;"/>
  <field class="sz.csi.CharKey" name="E" map="&#x00f0;"/>
  <field class="sz.csi.CharKey" name="D" map="&#x00f1;"/>
  <field class="sz.csi.CharKey" name="SEMICOLON" map="&#x00f2;"/>
  <field class="sz.csi.CharKey" name="C" map="&#x00f3;"/>
  <field class="sz.csi.CharKey" name="B" map="&#x00f4;"/>
  <field class="sz.csi.CharKey" name="A" map="&#x00f5;"/>
  <field class="sz.csi.CharKey" name="PAGEUP" map="&#x00f6;"/>
  <field class="sz.csi.CharKey" name="MINUS" map="&#x00f8;"/>
  <field class="sz.csi.CharKey" name="DARROW" map="&#x00f9;"/>
  <field class="sz.csi.CharKey" name="OR" map="&#x00fa;"/>
  <field class="sz.csi.CharKey" name="ENTER" map="&#x00fb;"/>
  <field class="sz.csi.CharKey" name="RARROW" map="&#x00fc;"/>
  <field class="sz.csi.CharKey" name="END" map="&#x00fd;"/>
  <field class="sz.csi.CharKey" name="CLOSESHARPBRACETS" map="&#x00fe;"/>
  <field class="sz.csi.CharKey" name="COLON" map="&#x00ff;"/>
  <field class="sz.csi.CharKey" name="mirrors" map="&#x0100;"/>
  <field class="sz.csi.CharKey" name="LARROW" map="&#x0101;"/>
  <field class="sz.csi.CharKey" name="BACKAPOSTROPHE" map="&#x0102;"/>
  <field class="sz.csi.CharKey" name="INSERT" map="&#x0103;"/>
  <field class="sz.csi.CharKey" name="RSHIFT" map="&#x0104;"/>
  <field class="sz.csi.CharKey" name="RCTRL" map="&#x0105;"/>
  <field class="sz.csi.CharKey" name="LSHIFT" map="&#x0106;"/>
  <field class="sz.csi.CharKey" name="EQUALS" map="&#x0107;"/>
  <method class="sz.csi.CharKey" name="boolean isDownRightArrow()" map="A"/>
  <method class="sz.csi.CharKey" name="boolean isDownLeftArrow()" map="B"/>
  <method class="sz.csi.CharKey" name="boolean isMetaKey()" map="C"/>
  <method class="sz.csi.CharKey" name="boolean isDownArrow()" map="D"/>
  <method class="sz.csi.CharKey" name="boolean isAlphaNumeric()" map="E"/>
  <method class="sz.csi.CharKey" name="boolean isUpArrow()" map="F"/>
  <method class="sz.csi.CharKey" name="boolean isRightArrow()" map="G"/>
  <method class="sz.csi.CharKey" name="boolean isLeftArrow()" map="H"/>
  <method class="sz.csi.CharKey" name="java.lang.String toString()" map="toString"/>
  <method class="sz.csi.CharKey" name="boolean isUpRightArrow()" map="I"/>
  <method class="sz.csi.CharKey" name="boolean isUpLeftArrow()" map="J"/>
  <method class="sz.csi.CharKey" name="boolean isCenterArrow()" map="K"/>
  <method class="sz.csi.CharKey" name="boolean isArrow()" map="L"/>
  <package name="sz.wav" map="F"/>
  <class name="sz.wav.WavPlayer" map="A"/>
  <field class="sz.wav.WavPlayer" name="wavFile" map="A"/>
  <field class="sz.wav.WavPlayer" name="class$0" map="class$0"/>
  <method class="sz.wav.WavPlayer" name="void play(java.lang.String)" map="A"/>
  <method class="sz.wav.WavPlayer" name="void run()" map="run"/>
  <package name="sz.midi" map="G"/>
  <class name="sz.midi.STMidiPlayer" map="A"/>
  <field class="sz.midi.STMidiPlayer" name="sequencer" map="A"/>
  <field class="sz.midi.STMidiPlayer" name="INS_LOAD" map="B"/>
  <field class="sz.midi.STMidiPlayer" name="currentInstruction" map="C"/>
  <field class="sz.midi.STMidiPlayer" name="INS_DIE" map="D"/>
  <field class="sz.midi.STMidiPlayer" name="currentMidiFile" map="E"/>
  <field class="sz.midi.STMidiPlayer" name="INS_STOP" map="F"/>
  <method class="sz.midi.STMidiPlayer" name="void setInstruction(int)" map="A"/>
  <method class="sz.midi.STMidiPlayer" name="void setMidi(java.lang.String)" map="A"/>
  <method class="sz.midi.STMidiPlayer" name="void run()" map="run"/>
  <class name="sz.midi.STMidiPlayerOr" map="B"/>
  <field class="sz.midi.STMidiPlayerOr" name="sequencer" map="A"/>
  <field class="sz.midi.STMidiPlayerOr" name="INS_LOAD" map="B"/>
  <field class="sz.midi.STMidiPlayerOr" name="currentInstruction" map="C"/>
  <field class="sz.midi.STMidiPlayerOr" name="INS_DIE" map="D"/>
  <field class="sz.midi.STMidiPlayerOr" name="currentMidiFile" map="E"/>
  <field class="sz.midi.STMidiPlayerOr" name="INS_STOP" map="F"/>
  <method class="sz.midi.STMidiPlayerOr" name="void setInstruction(int)" map="A"/>
  <method class="sz.midi.STMidiPlayerOr" name="void setMidi(java.lang.String)" map="A"/>
  <method class="sz.midi.STMidiPlayerOr" name="void run()" map="run"/>
  <package name="sz.crypt" map="H"/>
  <class name="sz.crypt.DESEncrypter" map="A"/>
  <field class="sz.crypt.DESEncrypter" name="iterationCount" map="A"/>
  <field class="sz.crypt.DESEncrypter" name="ecipher" map="B"/>
  <field class="sz.crypt.DESEncrypter" name="buf" map="C"/>
  <field class="sz.crypt.DESEncrypter" name="salt" map="D"/>
  <field class="sz.crypt.DESEncrypter" name="dcipher" map="E"/>
  <method class="sz.crypt.DESEncrypter" name="java.io.InputStream decrypt(java.io.InputStream)" map="A"/>
  <method class="sz.crypt.DESEncrypter" name="void decrypt(java.io.InputStream, java.io.OutputStream)" map="A"/>
  <method class="sz.crypt.DESEncrypter" name="void encrypt(java.io.InputStream, java.io.OutputStream)" map="B"/>
  <class name="sz.MP3Test" map="A"/>
  <field class="sz.MP3Test" name="class$0" map="class$0"/>
  <method class="sz.MP3Test" name="void playAudioStream(javax.sound.sampled.AudioInputStream)" map="A"/>
  <method class="sz.MP3Test" name="void main(java.lang.String[])" map="A"/>
  <method class="sz.MP3Test" name="void playAudioFile(java.lang.String)" map="A"/>
  <package name="crl" map="B"/>
  <package name="crl.ai" map="A"/>
  <package name="crl.ai.monster" map="A"/>
  <class name="crl.ai.monster.WanderToPlayerAI" map="A"/>
  <method class="crl.ai.monster.WanderToPlayerAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.WanderToPlayerAI" name="java.lang.String getID()" map="B"/>
  <method class="crl.ai.monster.WanderToPlayerAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="crl.ai.monster.StationaryAI" map="B"/>
  <method class="crl.ai.monster.StationaryAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.StationaryAI" name="java.lang.String getID()" map="B"/>
  <method class="crl.ai.monster.StationaryAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <class name="crl.ai.monster.RangedAI" map="C"/>
  <field class="crl.ai.monster.RangedAI" name="approachLimit" map="K"/>
  <method class="crl.ai.monster.RangedAI" name="void setApproachLimit(int)" map="D"/>
  <method class="crl.ai.monster.RangedAI" name="mrl.ai.ActionSelector derive()" map="A"/>
  <method class="crl.ai.monster.RangedAI" name="java.lang.String getID()" map="B"/>
  <method class="crl.ai.monster.RangedAI" name="mrl.action.Action selectAction(mrl.actor.Actor)" map="A"/>
  <package name="crl.levelgen" map="B"/>
  <package name="crl.levelgen.patterns" map="A"/>
  <class name="crl.levelgen.patterns.Decks" map="A"/>
  <method class="crl.levelgen.patterns.Decks" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Decks" name="java.lang.String[] getDwellers()" map="F"/>
  <method class="crl.levelgen.patterns.Decks" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Decks" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Decks" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.Last" map="B"/>
  <field class="crl.levelgen.patterns.Last" name="CHE" map="G"/>
  <field class="crl.levelgen.patterns.Last" name="ATO" map="H"/>
  <field class="crl.levelgen.patterns.Last" name="GEN" map="I"/>
  <field class="crl.levelgen.patterns.Last" name="BAC" map="J"/>
  <method class="crl.levelgen.patterns.Last" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Last" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Last" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Last" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.Prize" map="C"/>
  <method class="crl.levelgen.patterns.Prize" name="void main(java.lang.String[])" map="A"/>
  <class name="crl.levelgen.patterns.TestingArea" map="D"/>
  <method class="crl.levelgen.patterns.TestingArea" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.TestingArea" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.TestingArea" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.TestingArea" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.Barrier" map="E"/>
  <field class="crl.levelgen.patterns.Barrier" name="missileBarrier" map="K"/>
  <field class="crl.levelgen.patterns.Barrier" name="hijumpBarrier" map="L"/>
  <field class="crl.levelgen.patterns.Barrier" name="supermissileBarrier" map="M"/>
  <field class="crl.levelgen.patterns.Barrier" name="powerBombBarrier" map="N"/>
  <field class="crl.levelgen.patterns.Barrier" name="variaBarrier" map="O"/>
  <field class="crl.levelgen.patterns.Barrier" name="morphBarrier" map="P"/>
  <field class="crl.levelgen.patterns.Barrier" name="gravityBarrier" map="Q"/>
  <field class="crl.levelgen.patterns.Barrier" name="bombBarrier" map="R"/>
  <method class="crl.levelgen.patterns.Barrier" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Barrier" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Barrier" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Barrier" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.Upgrade" map="F"/>
  <method class="crl.levelgen.patterns.Upgrade" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.Upgrade" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.Upgrade" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.Upgrade" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.BombUpgrade" map="G"/>
  <method class="crl.levelgen.patterns.BombUpgrade" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.BombUpgrade" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.BombUpgrade" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.BombUpgrade" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.StaticPattern" map="H"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="inhabitantsMap" map="A"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="unleashers" map="B"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="cellMap" map="C"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="inhabitants" map="D"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="charMap" map="E"/>
  <field class="crl.levelgen.patterns.StaticPattern" name="spawnInfo" map="F"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="boolean isHostageSafe()" map="A"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="void setup(crl.levelgen.StaticGenerator)" map="A"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="boolean isHaunted()" map="C"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="mrl.cuts.Unleasher[] getUnleashers()" map="D"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.util.Hashtable getCharMap()" map="E"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[] getDwellers()" map="F"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getBoss()" map="G"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.util.Hashtable getInhabitantsMap()" map="H"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="crl.levelgen.MonsterSpawnInfo[] getSpawnInfo()" map="J"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[][] getInhabitants()" map="L"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[][] getCellMap()" map="N"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="sz.util.Position getBossPosition()" map="O"/>
  <method class="crl.levelgen.patterns.StaticPattern" name="java.lang.String[] getItems()" map="P"/>
  <class name="crl.levelgen.patterns.BaseEntrance" map="I"/>
  <method class="crl.levelgen.patterns.BaseEntrance" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.BaseEntrance" name="java.lang.String[] getDwellers()" map="F"/>
  <method class="crl.levelgen.patterns.BaseEntrance" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.BaseEntrance" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.BaseEntrance" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.BonyRoom" map="J"/>
  <method class="crl.levelgen.patterns.BonyRoom" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.BonyRoom" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.BonyRoom" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.BonyRoom" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <class name="crl.levelgen.patterns.LandingSite" map="K"/>
  <method class="crl.levelgen.patterns.LandingSite" name="java.lang.String getMusicKeyNoon()" map="K"/>
  <method class="crl.levelgen.patterns.LandingSite" name="java.lang.String getDescription()" map="M"/>
  <method class="crl.levelgen.patterns.LandingSite" name="java.lang.String[] getDwellers()" map="F"/>
  <method class="crl.levelgen.patterns.LandingSite" name="java.lang.String getMapKey()" map="B"/>
  <method class="crl.levelgen.patterns.LandingSite" name="java.lang.String getMusicKeyMorning()" map="I"/>
  <package name="crl.levelgen.cave" map="B"/>
  <class name="crl.levelgen.cave.LavaCaveLevelGenerator" map="A"/>
  <field class="crl.levelgen.cave.LavaCaveLevelGenerator" name="baseLava" map="m"/>
  <field class="crl.levelgen.cave.LavaCaveLevelGenerator" name="baseWall" map="n"/>
  <field class="crl.levelgen.cave.LavaCaveLevelGenerator" name="baseFloor" map="o"/>
  <method class="crl.levelgen.cave.LavaCaveLevelGenerator" name="void lightCandles(mrl.level.Level)" map="F"/>
  <method class="crl.levelgen.cave.LavaCaveLevelGenerator" name="mrl.level.Level generateLevel(int, int, boolean)" map="C"/>
  <method class="crl.levelgen.cave.LavaCaveLevelGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String)" map="D"/>
  <class name="crl.levelgen.cave.WispSim" map="B"/>
  <field class="crl.levelgen.cave.WispSim" name="lastWisp" map="A"/>
  <field class="crl.levelgen.cave.WispSim" name="wisp2" map="B"/>
  <field class="crl.levelgen.cave.WispSim" name="wisp1" map="C"/>
  <field class="crl.levelgen.cave.WispSim" name="level" map="D"/>
  <method class="crl.levelgen.cave.WispSim" name="void run(int[][])" map="A"/>
  <method class="crl.levelgen.cave.WispSim" name="void setWisps(crl.levelgen.cave.Wisp, crl.levelgen.cave.Wisp)" map="A"/>
  <class name="crl.levelgen.cave.CaveLevelGenerator" map="C"/>
  <field class="crl.levelgen.cave.CaveLevelGenerator" name="baseWall" map="A"/>
  <field class="crl.levelgen.cave.CaveLevelGenerator" name="baseFloor" map="B"/>
  <field class="crl.levelgen.cave.CaveLevelGenerator" name="baseWater" map="C"/>
  <method class="crl.levelgen.cave.CaveLevelGenerator" name="void lightCandles(mrl.level.Level)" map="B"/>
  <method class="crl.levelgen.cave.CaveLevelGenerator" name="mrl.level.Level generateLevel(int, int, boolean)" map="A"/>
  <method class="crl.levelgen.cave.CaveLevelGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <class name="crl.levelgen.cave.Wisp" map="D"/>
  <field class="crl.levelgen.cave.Wisp" name="level" map="A"/>
  <field class="crl.levelgen.cave.Wisp" name="strength" map="B"/>
  <field class="crl.levelgen.cave.Wisp" name="toleranceCounter" map="C"/>
  <field class="crl.levelgen.cave.Wisp" name="stupidCounter" map="D"/>
  <field class="crl.levelgen.cave.Wisp" name="friend" map="E"/>
  <field class="crl.levelgen.cave.Wisp" name="stupidTurns" map="F"/>
  <field class="crl.levelgen.cave.Wisp" name="position" map="G"/>
  <field class="crl.levelgen.cave.Wisp" name="xfriend" map="H"/>
  <field class="crl.levelgen.cave.Wisp" name="tolerance" map="I"/>
  <field class="crl.levelgen.cave.Wisp" name="yfriend" map="J"/>
  <method class="crl.levelgen.cave.Wisp" name="void rip(int, int)" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="void setLevel(int[][])" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="void radarFriend()" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="sz.util.Position getPosition()" map="B"/>
  <method class="crl.levelgen.cave.Wisp" name="void blastAway()" map="C"/>
  <method class="crl.levelgen.cave.Wisp" name="void setFriend(crl.levelgen.cave.Wisp)" map="A"/>
  <method class="crl.levelgen.cave.Wisp" name="void go()" map="D"/>
  <class name="crl.levelgen.cave.ForestLevelGenerator" map="E"/>
  <field class="crl.levelgen.cave.ForestLevelGenerator" name="baseLava" map="D"/>
  <field class="crl.levelgen.cave.ForestLevelGenerator" name="baseWall" map="E"/>
  <field class="crl.levelgen.cave.ForestLevelGenerator" name="baseFloor" map="F"/>
  <method class="crl.levelgen.cave.ForestLevelGenerator" name="void lightCandles(mrl.level.Level)" map="C"/>
  <method class="crl.levelgen.cave.ForestLevelGenerator" name="mrl.level.Level generateLevel(int, int, boolean)" map="B"/>
  <method class="crl.levelgen.cave.ForestLevelGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String)" map="B"/>
  <class name="crl.levelgen.MonsterSpawnInfo" map="A"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="BORDER" map="A"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="WATER" map="B"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="frequency" map="C"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="monsterID" map="D"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="UNDERGROUND" map="E"/>
  <field class="crl.levelgen.MonsterSpawnInfo" name="spawnLocation" map="F"/>
  <method class="crl.levelgen.MonsterSpawnInfo" name="java.lang.String getMonsterID()" map="A"/>
  <method class="crl.levelgen.MonsterSpawnInfo" name="int getFrequency()" map="B"/>
  <method class="crl.levelgen.MonsterSpawnInfo" name="int getSpawnLocation()" map="C"/>
  <class name="crl.levelgen.BaseGenerator$Room" map="_A"/>
  <field class="crl.levelgen.BaseGenerator$Room" name="this$0" map="this$0"/>
  <field class="crl.levelgen.BaseGenerator$Room" name="height" map="A"/>
  <field class="crl.levelgen.BaseGenerator$Room" name="xpos" map="B"/>
  <field class="crl.levelgen.BaseGenerator$Room" name="width" map="C"/>
  <field class="crl.levelgen.BaseGenerator$Room" name="ypos" map="D"/>
  <class name="crl.levelgen.BaseGenerator" map="B"/>
  <field class="crl.levelgen.BaseGenerator" name="baseWall" map="G"/>
  <field class="crl.levelgen.BaseGenerator" name="baseFloor3" map="H"/>
  <field class="crl.levelgen.BaseGenerator" name="baseDoor" map="I"/>
  <field class="crl.levelgen.BaseGenerator" name="baseFloor" map="J"/>
  <field class="crl.levelgen.BaseGenerator" name="baseFloor2" map="K"/>
  <field class="crl.levelgen.BaseGenerator" name="exits" map="L"/>
  <field class="crl.levelgen.BaseGenerator" name="exitDoors" map="M"/>
  <field class="crl.levelgen.BaseGenerator" name="preLevel" map="N"/>
  <method class="crl.levelgen.BaseGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList)" map="A"/>
  <method class="crl.levelgen.BaseGenerator" name="void divideHorizontal(crl.levelgen.BaseGenerator$Room, int)" map="A"/>
  <method class="crl.levelgen.BaseGenerator" name="mrl.level.Level generateLevel(int, int)" map="A"/>
  <method class="crl.levelgen.BaseGenerator" name="void divideVertical(crl.levelgen.BaseGenerator$Room, int)" map="B"/>
  <method class="crl.levelgen.BaseGenerator" name="void ellevateLevel()" map="A"/>
  <method class="crl.levelgen.BaseGenerator" name="void main(java.lang.String[])" map="A"/>
  <method class="crl.levelgen.BaseGenerator" name="int getWidth()" map="B"/>
  <method class="crl.levelgen.BaseGenerator" name="void printIt()" map="C"/>
  <method class="crl.levelgen.BaseGenerator" name="int getHeight()" map="D"/>
  <class name="crl.levelgen.LevelMetaData" map="C"/>
  <field class="crl.levelgen.LevelMetaData" name="dwellers" map="A"/>
  <field class="crl.levelgen.LevelMetaData" name="levelName" map="B"/>
  <field class="crl.levelgen.LevelMetaData" name="musicKey" map="C"/>
  <field class="crl.levelgen.LevelMetaData" name="levelDescription" map="D"/>
  <field class="crl.levelgen.LevelMetaData" name="exits" map="E"/>
  <field class="crl.levelgen.LevelMetaData" name="exitDoors" map="F"/>
  <method class="crl.levelgen.LevelMetaData" name="void addNextRoom(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.levelgen.LevelMetaData" name="void addNextRoom(java.lang.String)" map="A"/>
  <class name="crl.levelgen.LevelFeature" map="D"/>
  <field class="crl.levelgen.LevelFeature" name="descriptions" map="A"/>
  <field class="crl.levelgen.LevelFeature" name="size" map="B"/>
  <field class="crl.levelgen.LevelFeature" name="layouts" map="C"/>
  <method class="crl.levelgen.LevelFeature" name="java.lang.String[][] getALayout()" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="void setSize(sz.util.Dimension)" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="void addLayout(java.lang.String[][])" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="void addLayout(java.lang.String[])" map="A"/>
  <method class="crl.levelgen.LevelFeature" name="sz.util.Dimension getSize()" map="B"/>
  <class name="crl.levelgen.LevelPlotter$PanelLevel" map="_A"/>
  <field class="crl.levelgen.LevelPlotter$PanelLevel" name="level" map="A"/>
  <method class="crl.levelgen.LevelPlotter$PanelLevel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <class name="crl.levelgen.LevelPlotter" map="E"/>
  <field class="crl.levelgen.LevelPlotter" name="firstCave" map="A"/>
  <field class="crl.levelgen.LevelPlotter" name="currentDispatcher" map="B"/>
  <method class="crl.levelgen.LevelPlotter" name="mrl.ai.ActionSelector[] getSelectorDefinitions()" map="A"/>
  <method class="crl.levelgen.LevelPlotter" name="void initializeMonsters()" map="B"/>
  <method class="crl.levelgen.LevelPlotter" name="mrl.level.Dispatcher getCurrentDispatcher()" map="C"/>
  <method class="crl.levelgen.LevelPlotter" name="void initializeActions()" map="D"/>
  <method class="crl.levelgen.LevelPlotter" name="void initializeSmartFeatures()" map="E"/>
  <method class="crl.levelgen.LevelPlotter" name="mrl.level.Level createLevel(java.lang.String, java.lang.String, int, crl.levelgen.LevelMetaData)" map="A"/>
  <method class="crl.levelgen.LevelPlotter" name="void initializeSelectors()" map="F"/>
  <method class="crl.levelgen.LevelPlotter" name="void main(java.lang.String[])" map="A"/>
  <method class="crl.levelgen.LevelPlotter" name="int placeKeys(mrl.level.Level)" map="A"/>
  <class name="crl.levelgen.LevelMaster" map="F"/>
  <field class="crl.levelgen.LevelMaster" name="firstCave" map="A"/>
  <field class="crl.levelgen.LevelMaster" name="currentDispatcher" map="B"/>
  <method class="crl.levelgen.LevelMaster" name="mrl.level.Level createLevel(java.lang.String, java.lang.String, int, crl.levelgen.LevelMetaData)" map="A"/>
  <method class="crl.levelgen.LevelMaster" name="mrl.level.Dispatcher getCurrentDispatcher()" map="A"/>
  <class name="crl.levelgen.RuinLevelGenerator" map="G"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="baseWall" map="O"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="baseDoor" map="P"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="baseFloor" map="Q"/>
  <field class="crl.levelgen.RuinLevelGenerator" name="preLevel" map="R"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="void lightCandles(mrl.level.Level)" map="D"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="boolean hasConflicts(int, int, int, int)" map="A"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="mrl.level.Level generateLevel(int, int, int)" map="A"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="int getWidth()" map="E"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="void init(java.lang.String, java.lang.String, java.lang.String)" map="C"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="void doRuin()" map="F"/>
  <method class="crl.levelgen.RuinLevelGenerator" name="int getHeight()" map="G"/>
  <class name="crl.levelgen.PatternGenerator" map="H"/>
  <field class="crl.levelgen.PatternGenerator" name="endFeature" map="S"/>
  <field class="crl.levelgen.PatternGenerator" name="baseFeature" map="T"/>
  <field class="crl.levelgen.PatternGenerator" name="assignedFeatures" map="U"/>
  <field class="crl.levelgen.PatternGenerator" name="charMap" map="V"/>
  <field class="crl.levelgen.PatternGenerator" name="singleton" map="W"/>
  <field class="crl.levelgen.PatternGenerator" name="hasBoss" map="X"/>
  <method class="crl.levelgen.PatternGenerator" name="void setCharMap(java.util.Hashtable)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="void assignFeature(crl.levelgen.LevelFeature, sz.util.Position)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="mrl.level.Level createLevel()" map="H"/>
  <method class="crl.levelgen.PatternGenerator" name="crl.levelgen.PatternGenerator getGenerator()" map="I"/>
  <method class="crl.levelgen.PatternGenerator" name="boolean hasBoss()" map="J"/>
  <method class="crl.levelgen.PatternGenerator" name="void drawFeature(crl.levelgen.LevelFeature, sz.util.Position, mrl.level.Level)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="void setBaseFeature(crl.levelgen.LevelFeature)" map="A"/>
  <method class="crl.levelgen.PatternGenerator" name="void resetFeatures()" map="K"/>
  <method class="crl.levelgen.PatternGenerator" name="void setHasBoss(boolean)" map="A"/>
  <class name="crl.levelgen.AssignedFeature" map="I"/>
  <field class="crl.levelgen.AssignedFeature" name="position" map="A"/>
  <field class="crl.levelgen.AssignedFeature" name="feature" map="B"/>
  <method class="crl.levelgen.AssignedFeature" name="sz.util.Position getPosition()" map="A"/>
  <method class="crl.levelgen.AssignedFeature" name="crl.levelgen.LevelFeature getFeature()" map="B"/>
  <class name="crl.levelgen.StaticGenerator" map="J"/>
  <field class="crl.levelgen.StaticGenerator" name="inhabitantsMap" map="A"/>
  <field class="crl.levelgen.StaticGenerator" name="inhabitants" map="B"/>
  <field class="crl.levelgen.StaticGenerator" name="charMap" map="C"/>
  <field class="crl.levelgen.StaticGenerator" name="singleton" map="D"/>
  <field class="crl.levelgen.StaticGenerator" name="level" map="E"/>
  <method class="crl.levelgen.StaticGenerator" name="void setCharMap(java.util.Hashtable)" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void setInhabitants(java.lang.String[][])" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void reset()" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="mrl.level.Level createLevel()" map="B"/>
  <method class="crl.levelgen.StaticGenerator" name="crl.levelgen.StaticGenerator getGenerator()" map="C"/>
  <method class="crl.levelgen.StaticGenerator" name="void setInhabitantsMap(java.util.Hashtable)" map="B"/>
  <method class="crl.levelgen.StaticGenerator" name="void setFlatLevel(java.lang.String[])" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="int placeKeys(mrl.level.Level)" map="A"/>
  <method class="crl.levelgen.StaticGenerator" name="void setLevel(java.lang.String[][])" map="B"/>
  <class name="crl.levelgen.LevelGenerator" map="K"/>
  <method class="crl.levelgen.LevelGenerator" name="mrl.level.Cell[][] renderLevel(java.lang.String[][])" map="A"/>
  <method class="crl.levelgen.LevelGenerator" name="int placeKeys(mrl.level.Level)" map="A"/>
  <class name="crl.levelgen.TestLevelGenerator" map="L"/>
  <field class="crl.levelgen.TestLevelGenerator" name="descriptions" map="Y"/>
  <method class="crl.levelgen.TestLevelGenerator" name="mrl.level.Level generateLevel(java.lang.String, mrl.level.Dispatcher)" map="A"/>
  <class name="crl.levelgen.GirdLevelGenerator" map="M"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="candles" map="Z"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="baseWall" map="_"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="baseFloor" map="a"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="visitedRooms" map="b"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="endIndex" map="c"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="roomHeight" map="d"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="startIndex" map="e"/>
  <field class="crl.levelgen.GirdLevelGenerator" name="roomWidth" map="f"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="mrl.level.Level plotLevel()" map="L"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="boolean connected()" map="M"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void carveRoom(mrl.level.Cell[][][], int, int)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="mrl.level.Level generateLevel(sz.util.Position, int, int, int, int)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void setCandles(int)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void printVisited()" map="N"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void init(java.lang.String, java.lang.String)" map="A"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void setVisitedRooms()" map="O"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="int getWidth()" map="P"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="void lightCandles(mrl.level.Level)" map="E"/>
  <method class="crl.levelgen.GirdLevelGenerator" name="int getHeight()" map="Q"/>
  <class name="crl.levelgen.BaseGeneratorOriginal$Room" map="_A"/>
  <field class="crl.levelgen.BaseGeneratorOriginal$Room" name="this$0" map="this$0"/>
  <field class="crl.levelgen.BaseGeneratorOriginal$Room" name="height" map="A"/>
  <field class="crl.levelgen.BaseGeneratorOriginal$Room" name="xpos" map="B"/>
  <field class="crl.levelgen.BaseGeneratorOriginal$Room" name="width" map="C"/>
  <field class="crl.levelgen.BaseGeneratorOriginal$Room" name="ypos" map="D"/>
  <class name="crl.levelgen.BaseGeneratorOriginal" map="N"/>
  <field class="crl.levelgen.BaseGeneratorOriginal" name="baseWall" map="g"/>
  <field class="crl.levelgen.BaseGeneratorOriginal" name="baseDoor" map="h"/>
  <field class="crl.levelgen.BaseGeneratorOriginal" name="baseFloor" map="i"/>
  <field class="crl.levelgen.BaseGeneratorOriginal" name="exits" map="j"/>
  <field class="crl.levelgen.BaseGeneratorOriginal" name="exitDoors" map="k"/>
  <field class="crl.levelgen.BaseGeneratorOriginal" name="preLevel" map="l"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="void main(java.lang.String[])" map="B"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="void divideVertical(crl.levelgen.BaseGeneratorOriginal$Room, int)" map="A"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="void divideHorizontal(crl.levelgen.BaseGeneratorOriginal$Room, int)" map="B"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="mrl.level.Level generateLevel(int, int)" map="B"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="void init(java.lang.String, java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList)" map="A"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="int getWidth()" map="R"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="void printIt()" map="S"/>
  <method class="crl.levelgen.BaseGeneratorOriginal" name="int getHeight()" map="T"/>
  <package name="crl.deploy" map="C"/>
  <class name="crl.deploy.MonsterEncrypter" map="A"/>
  <method class="crl.deploy.MonsterEncrypter" name="void main(java.lang.String[])" map="A"/>
</map>
</yguard>
